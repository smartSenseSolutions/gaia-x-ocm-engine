"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpTransportSession = exports.HttpInboundTransport = void 0;
const core_1 = require("@aries-framework/core");
const express_1 = __importStar(require("express"));
class HttpInboundTransport {
    constructor({ app, port }) {
        this.port = port;
        // Create Express App
        this.app = app !== null && app !== void 0 ? app : express_1.default();
        this.app.use(express_1.text({
            type: [core_1.DidCommMimeType.V0, core_1.DidCommMimeType.V1],
            limit: '5mb',
        }));
    }
    get server() {
        return this._server;
    }
    async start(agent) {
        const transportService = agent.injectionContainer.resolve(core_1.TransportService);
        const config = agent.injectionContainer.resolve(core_1.AgentConfig);
        config.logger.debug(`Starting HTTP inbound transport`, {
            port: this.port,
        });
        this.app.post('/', async (req, res) => {
            const session = new HttpTransportSession(core_1.utils.uuid(), req, res);
            try {
                const message = req.body;
                const encryptedMessage = JSON.parse(message);
                await agent.receiveMessage(encryptedMessage, session);
                // If agent did not use session when processing message we need to send response here.
                if (!res.headersSent) {
                    res.status(200).end();
                }
            }
            catch (error) {
                config.logger.error(`Error processing inbound message: ${error.message}`, error);
                res.status(500).send('Error processing message');
            }
            finally {
                transportService.removeSession(session);
            }
        });
        this._server = this.app.listen(this.port);
    }
    async stop() {
        var _a;
        (_a = this._server) === null || _a === void 0 ? void 0 : _a.close();
    }
}
exports.HttpInboundTransport = HttpInboundTransport;
class HttpTransportSession {
    constructor(id, req, res) {
        this.type = 'http';
        this.id = id;
        this.req = req;
        this.res = res;
    }
    async send(encryptedMessage) {
        if (this.res.headersSent) {
            throw new core_1.AriesFrameworkError(`${this.type} transport session has been closed.`);
        }
        // FIXME: we should not use json(), but rather the correct
        // DIDComm content-type based on the req and agent config
        this.res.status(200).json(encryptedMessage).end();
    }
}
exports.HttpTransportSession = HttpTransportSession;
//# sourceMappingURL=HttpInboundTransport.js.map