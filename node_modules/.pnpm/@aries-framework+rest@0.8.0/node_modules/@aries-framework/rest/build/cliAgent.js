"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runRestAgent = exports.readRestConfig = void 0;
const core_1 = require("@aries-framework/core");
const node_1 = require("@aries-framework/node");
const promises_1 = require("fs/promises");
const server_1 = require("./server");
const logger_1 = require("./utils/logger");
const inboundTransportMapping = {
    http: node_1.HttpInboundTransport,
    ws: node_1.WsInboundTransport,
};
const outboundTransportMapping = {
    http: core_1.HttpOutboundTransport,
    ws: core_1.WsOutboundTransport,
};
async function readRestConfig(path) {
    const configString = await (0, promises_1.readFile)(path, { encoding: 'utf-8' });
    const config = JSON.parse(configString);
    return config;
}
exports.readRestConfig = readRestConfig;
async function runRestAgent(restConfig) {
    const { logLevel, inboundTransports = [], outboundTransports = [], webhookUrl, adminPort } = restConfig, afjConfig = __rest(restConfig, ["logLevel", "inboundTransports", "outboundTransports", "webhookUrl", "adminPort"]);
    const logger = new logger_1.TsLogger(logLevel !== null && logLevel !== void 0 ? logLevel : core_1.LogLevel.error);
    const agentConfig = Object.assign(Object.assign({}, afjConfig), { logger });
    const agent = new core_1.Agent(agentConfig, node_1.agentDependencies);
    // Register outbound transports
    for (const outboundTransport of outboundTransports) {
        const OutboundTransport = outboundTransportMapping[outboundTransport];
        agent.registerOutboundTransport(new OutboundTransport());
    }
    // Register inbound transports
    for (const inboundTransport of inboundTransports) {
        const InboundTransport = inboundTransportMapping[inboundTransport.transport];
        agent.registerInboundTransport(new InboundTransport({ port: inboundTransport.port }));
    }
    await agent.initialize();
    const app = await (0, server_1.setupServer)(agent, {
        webhookUrl,
        port: adminPort,
    });
    app.listen(adminPort, () => {
        logger.info(`Successfully started server on port ${adminPort}`);
    });
}
exports.runRestAgent = runRestAgent;
//# sourceMappingURL=cliAgent.js.map