import { Agent } from '@aries-framework/core';
import { AcceptCredentialProposalRequest } from '../../schemas/AcceptCredentialProposalRequest';
import { CredentialOfferRequest } from '../../schemas/CredentialOfferRequest';
import { CredentialOfferTemp } from '../../schemas/CredentialOfferTemplate';
import { CredentialProposalRequest } from '../../schemas/CredentialProposalRequest';
export declare class CredentialController {
    private agent;
    constructor(agent: Agent);
    /**
     * Retrieve credential record by credentialId
     */
    getCredentialById(credentialId: string): Promise<Record<string, unknown>>;
    /**
     * Retrieve all credential records
     */
    getAllCredentials(): Promise<Record<string, unknown>[]>;
    /**
     * Initiate a new credential exchange as holder by sending a credential proposal message
     * to the connection with the specified connection id.
     */
    proposeCredential(proposal: CredentialProposalRequest): Promise<Record<string, unknown>>;
    /**
     * Accept a credential proposal as issuer (by sending a credential offer message) to the connection
     * associated with the credential record.
     */
    acceptProposal(credentialId: string, proposal: AcceptCredentialProposalRequest): Promise<Record<string, unknown>>;
    /**
     * Creates a credential offer not bound to any existing connection
     */
    offerCredentialOutOfBand(offer: CredentialOfferTemp): Promise<{
        message: string;
        credentialRecord: import("@aries-framework/core").CredentialRecord;
    }>;
    /**
     * Initiate a new credential exchange as issuer by sending a credential offer message
     * to the connection with the specified connection id.
     */
    offerCredential(offer: CredentialOfferRequest): Promise<Record<string, unknown>>;
    /**
     * Accept a credential offer as holder (by sending a credential request message) to the connection
     * associated with the credential record.
     */
    acceptOffer(credentialId: string): Promise<Record<string, unknown>>;
    /**
     * Accept a credential request as issuer (by sending a credential message) to the connection
     * associated with the credential record.
     */
    acceptRequest(credentialId: string): Promise<Record<string, unknown>>;
    /**
     * Accept a credential as holder (by sending a credential acknowledgement message) to the connection
     * associated with the credential record.
     */
    acceptCredential(credentialId: string): Promise<Record<string, unknown>>;
    /**
     * Deletes a credentialRecord in the credential repository.
     */
    deleteCredential(credentialId: string): Promise<void>;
}
