import { Agent } from '@aries-framework/core';
import { AcceptProofProposalRequest } from '../../schemas/AcceptProofProposalRequest';
import { PresentationProofRequest } from '../../schemas/PresentationProofRequest';
import { ProofPresentationRequest } from '../../schemas/ProofPresentationRequest';
import { ProofProposalRequest } from '../../schemas/ProofProposalRequest';
import { ProofRequestTemplate } from '../../schemas/ProofRequestTemplate';
export declare class ProofController {
    private agent;
    constructor(agent: Agent);
    /**
     * Retrieve proof record by proofRecordId
     */
    getProofById(proofRecordId: string): Promise<Record<string, unknown>>;
    /**
     * Retrieve all ProofRecords
     */
    getAllProofs(threadId?: string): Promise<unknown[]>;
    /**
     * Initiate a new presentation exchange as prover by sending a presentation proposal message
     * to the connection with the specified connection id.
     */
    proposeProof(proposal: ProofProposalRequest): Promise<Record<string, unknown>>;
    /**
     * Accept a presentation proposal as verifier (by sending a presentation request message) to the connection
     * associated with the proof record.
     */
    acceptProposal(proofRecordId: string, proposal: AcceptProofProposalRequest): Promise<Record<string, unknown>>;
    /**
     * Creates a presentation request not bound to any proposal or existing connection
     */
    requestProofOutOfBand(request: ProofRequestTemplate): Promise<{
        message: string;
        proofRecord: import("@aries-framework/core").ProofRecord;
    }>;
    /**
     * Creates a presentation request bound to existing connection
     */
    requestProof(request: ProofPresentationRequest): Promise<Record<string, unknown>>;
    /**
     * Accept a presentation request as prover (by sending a presentation message) to the connection
     * associated with the proof record.
     */
    acceptRequest(proofRecordId: string, request: PresentationProofRequest): Promise<Record<string, unknown>>;
    /**
     * Accept a presentation as prover (by sending a presentation acknowledgement message) to the connection
     * associated with the proof record.
     */
    acceptPresentation(proofRecordId: string): Promise<Record<string, unknown>>;
    /**
     * Deletes a proofRecord in the proof repository.
     */
    deleteProof(proofRecordId: string): Promise<void>;
}
