"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialController = void 0;
const core_1 = require("@aries-framework/core");
const JsonEncoder_1 = require("@aries-framework/core/build/utils/JsonEncoder");
const indyError_1 = require("@aries-framework/core/build/utils/indyError");
const routing_controllers_1 = require("routing-controllers");
const typedi_1 = require("typedi");
const AcceptCredentialProposalRequest_1 = require("../../schemas/AcceptCredentialProposalRequest");
const CredentialOfferRequest_1 = require("../../schemas/CredentialOfferRequest");
const CredentialOfferTemplate_1 = require("../../schemas/CredentialOfferTemplate");
const CredentialProposalRequest_1 = require("../../schemas/CredentialProposalRequest");
let CredentialController = class CredentialController {
    constructor(agent) {
        this.agent = agent;
    }
    /**
     * Retrieve credential record by credentialId
     */
    async getCredentialById(credentialId) {
        try {
            const credential = await this.agent.credentials.getById(credentialId);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`credential with credentialId "${credentialId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
    /**
     * Retrieve all credential records
     */
    async getAllCredentials() {
        const credentials = await this.agent.credentials.getAll();
        return credentials.map((c) => c.toJSON());
    }
    /**
     * Initiate a new credential exchange as holder by sending a credential proposal message
     * to the connection with the specified connection id.
     */
    async proposeCredential(proposal) {
        const { connectionId } = proposal, proposalRequest = __rest(proposal, ["connectionId"]);
        try {
            const credential = await this.agent.credentials.proposeCredential(connectionId, proposalRequest);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`Connection with connection id "${connectionId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`Something went wrong: ${error}`);
        }
    }
    /**
     * Accept a credential proposal as issuer (by sending a credential offer message) to the connection
     * associated with the credential record.
     */
    async acceptProposal(credentialId, proposal) {
        try {
            const credential = await this.agent.credentials.acceptProposal(credentialId, proposal);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`Credential with credential id "${credentialId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`Something went wrong: ${error}`);
        }
    }
    /**
     * Creates a credential offer not bound to any existing connection
     */
    async offerCredentialOutOfBand(offer) {
        const credential = await this.agent.credentials.createOutOfBandOffer(offer);
        return {
            message: `${this.agent.config.endpoints[0]}/?d_m=${JsonEncoder_1.JsonEncoder.toBase64URL(credential.offerMessage.toJSON({ useLegacyDidSovPrefix: this.agent.config.useLegacyDidSovPrefix }))}`,
            credentialRecord: credential.credentialRecord,
        };
    }
    /**
     * Initiate a new credential exchange as issuer by sending a credential offer message
     * to the connection with the specified connection id.
     */
    async offerCredential(offer) {
        const { connectionId } = offer, offerRequest = __rest(offer, ["connectionId"]);
        try {
            const credential = await this.agent.credentials.offerCredential(connectionId, offerRequest);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.IndySdkError) {
                if ((0, indyError_1.isIndyError)(error.cause, 'WalletItemNotFound')) {
                    throw new routing_controllers_1.NotFoundError(`credential definition with credentialDefinitionId "${offer.credentialDefinitionId}" not found.`);
                }
            }
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`Connection with connection id "${connectionId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`Something went wrong: ${error}`);
        }
    }
    /**
     * Accept a credential offer as holder (by sending a credential request message) to the connection
     * associated with the credential record.
     */
    async acceptOffer(credentialId) {
        try {
            const credential = await this.agent.credentials.acceptOffer(credentialId);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`Credential with credential id "${credentialId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`Something went wrong: ${error}`);
        }
    }
    /**
     * Accept a credential request as issuer (by sending a credential message) to the connection
     * associated with the credential record.
     */
    async acceptRequest(credentialId) {
        try {
            const credential = await this.agent.credentials.acceptRequest(credentialId);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`Credential with credential id "${credentialId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`Something went wrong: ${error}`);
        }
    }
    /**
     * Accept a credential as holder (by sending a credential acknowledgement message) to the connection
     * associated with the credential record.
     */
    async acceptCredential(credentialId) {
        try {
            const credential = await this.agent.credentials.acceptCredential(credentialId);
            return credential.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`Credential with credential id "${credentialId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`Something went wrong: ${error}`);
        }
    }
    /**
     * Deletes a credentialRecord in the credential repository.
     */
    async deleteCredential(credentialId) {
        try {
            await this.agent.credentials.deleteById(credentialId);
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`Credential with credential id "${credentialId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`Something went wrong: ${error}`);
        }
    }
};
__decorate([
    (0, typedi_1.Inject)(),
    __metadata("design:type", core_1.Agent)
], CredentialController.prototype, "agent", void 0);
__decorate([
    (0, routing_controllers_1.Get)('/:credentialId'),
    __param(0, (0, routing_controllers_1.Param)('credentialId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "getCredentialById", null);
__decorate([
    (0, routing_controllers_1.Get)('/'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "getAllCredentials", null);
__decorate([
    (0, routing_controllers_1.Post)('/propose-credential'),
    __param(0, (0, routing_controllers_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CredentialProposalRequest_1.CredentialProposalRequest]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "proposeCredential", null);
__decorate([
    (0, routing_controllers_1.Post)('/:credentialId/accept-proposal'),
    __param(0, (0, routing_controllers_1.Param)('credentialId')),
    __param(1, (0, routing_controllers_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, AcceptCredentialProposalRequest_1.AcceptCredentialProposalRequest]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "acceptProposal", null);
__decorate([
    (0, routing_controllers_1.Post)('/offer-outofband-credential'),
    __param(0, (0, routing_controllers_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CredentialOfferTemplate_1.CredentialOfferTemp]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "offerCredentialOutOfBand", null);
__decorate([
    (0, routing_controllers_1.Post)('/offer-credential'),
    __param(0, (0, routing_controllers_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CredentialOfferRequest_1.CredentialOfferRequest]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "offerCredential", null);
__decorate([
    (0, routing_controllers_1.Post)('/:credentialId/accept-offer'),
    __param(0, (0, routing_controllers_1.Param)('credentialId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "acceptOffer", null);
__decorate([
    (0, routing_controllers_1.Post)('/:credentialId/accept-request'),
    __param(0, (0, routing_controllers_1.Param)('credentialId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "acceptRequest", null);
__decorate([
    (0, routing_controllers_1.Post)('/:credentialId/accept-credential'),
    __param(0, (0, routing_controllers_1.Param)('credentialId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "acceptCredential", null);
__decorate([
    (0, routing_controllers_1.Delete)('/:credentialId'),
    (0, routing_controllers_1.OnUndefined)(204),
    __param(0, (0, routing_controllers_1.Param)('credentialId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], CredentialController.prototype, "deleteCredential", null);
CredentialController = __decorate([
    (0, routing_controllers_1.JsonController)('/credentials'),
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [core_1.Agent])
], CredentialController);
exports.CredentialController = CredentialController;
//# sourceMappingURL=CredentialController.js.map