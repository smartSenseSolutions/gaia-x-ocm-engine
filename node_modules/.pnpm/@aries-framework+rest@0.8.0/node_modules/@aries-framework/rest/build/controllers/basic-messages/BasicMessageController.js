"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicMessageController = void 0;
const core_1 = require("@aries-framework/core");
const routing_controllers_1 = require("routing-controllers");
const typedi_1 = require("typedi");
const BasicMessageRequest_1 = require("../../schemas/BasicMessageRequest");
let BasicMessageController = class BasicMessageController {
    constructor(agent) {
        this.agent = agent;
    }
    /**
     * Retrieve basic messages by connectionId
     */
    async getBasicMessages(connectionId) {
        const basicMessages = await this.agent.basicMessages.findAllByQuery({ connectionId: connectionId });
        return basicMessages.map((m) => m.toJSON());
    }
    /**
     * Send a basic message to a connection
     */
    async sendMessage(connectionId, basicMessage) {
        try {
            await this.agent.basicMessages.sendMessage(connectionId, basicMessage.content);
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`connection with connectionId "${connectionId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
};
__decorate([
    (0, typedi_1.Inject)(),
    __metadata("design:type", core_1.Agent)
], BasicMessageController.prototype, "agent", void 0);
__decorate([
    (0, routing_controllers_1.Get)('/:connectionId'),
    __param(0, (0, routing_controllers_1.Param)('connectionId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], BasicMessageController.prototype, "getBasicMessages", null);
__decorate([
    (0, routing_controllers_1.Post)('/:connectionId'),
    (0, routing_controllers_1.OnUndefined)(204),
    __param(0, (0, routing_controllers_1.Param)('connectionId')),
    __param(1, (0, routing_controllers_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, BasicMessageRequest_1.BasicMessageRequest]),
    __metadata("design:returntype", Promise)
], BasicMessageController.prototype, "sendMessage", null);
BasicMessageController = __decorate([
    (0, routing_controllers_1.JsonController)('/basic-messages'),
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [core_1.Agent])
], BasicMessageController);
exports.BasicMessageController = BasicMessageController;
//# sourceMappingURL=BasicMessageController.js.map