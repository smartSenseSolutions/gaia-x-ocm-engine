"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionController = void 0;
const core_1 = require("@aries-framework/core");
const routing_controllers_1 = require("routing-controllers");
const typedi_1 = require("typedi");
const InvitationConfigRequest_1 = require("../../schemas/InvitationConfigRequest");
const ReceiveInvitationByUrlRequest_1 = require("../../schemas/ReceiveInvitationByUrlRequest");
const ReceiveInvitationRequest_1 = require("../../schemas/ReceiveInvitationRequest");
let ConnectionController = class ConnectionController {
    constructor(agent) {
        this.agent = agent;
    }
    /**
     * Retrieve connection record by connectionId
     */
    async getConnectionById(connectionId) {
        const connection = await this.agent.connections.findById(connectionId);
        if (!connection) {
            throw new routing_controllers_1.NotFoundError(`connection with connectionId "${connectionId}" not found.`);
        }
        return connection.toJSON();
    }
    /**
     * Retrieve all connections records
     */
    async getAllConnections() {
        const connections = await this.agent.connections.getAll();
        return connections.map((c) => c.toJSON());
    }
    /**
     * Creates a new ConnectionRecord and InvitationMessage.
     * Returns ConnectionRecord with invitation and invitation_url
     */
    async createInvitation(invitationConfig) {
        try {
            const { invitation, connectionRecord } = await this.agent.connections.createConnection(invitationConfig);
            return {
                invitationUrl: invitation.toUrl({
                    domain: this.agent.config.endpoints[0],
                    useLegacyDidSovPrefix: this.agent.config.useLegacyDidSovPrefix,
                }),
                invitation: invitation.toJSON({ useLegacyDidSovPrefix: this.agent.config.useLegacyDidSovPrefix }),
                connection: connectionRecord.toJSON(),
            };
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`mediator with mediatorId ${invitationConfig === null || invitationConfig === void 0 ? void 0 : invitationConfig.mediatorId} not found`);
            }
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
    /**
     * Receive connection invitation as invitee and create connection. If auto accepting is enabled
     * via either the config passed in the function or the global agent config, a connection
     * request message will be send.
     */
    async receiveInvitation(invitationRequest) {
        const { invitation } = invitationRequest, config = __rest(invitationRequest, ["invitation"]);
        try {
            const inv = core_1.JsonTransformer.fromJSON(invitation, core_1.ConnectionInvitationMessage);
            const connection = await this.agent.connections.receiveInvitation(inv, config);
            return connection.toJSON();
        }
        catch (error) {
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
    /**
     * Receive connection invitation as invitee by invitationUrl and create connection. If auto accepting is enabled
     * via either the config passed in the function or the global agent config, a connection
     * request message will be send.
     */
    async receiveInvitationByUrl(invitationByUrlRequest) {
        const { invitationUrl } = invitationByUrlRequest, config = __rest(invitationByUrlRequest, ["invitationUrl"]);
        try {
            const connection = await this.agent.connections.receiveInvitationFromUrl(invitationUrl, config);
            return connection.toJSON();
        }
        catch (error) {
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
    /**
     * Accept a connection invitation as invitee (by sending a connection request message) for the connection with the specified connection id.
     * This is not needed when auto accepting of connections is enabled.
     */
    async acceptInvitation(connectionId) {
        try {
            const connection = await this.agent.connections.acceptInvitation(connectionId);
            return connection.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`connection with connectionId "${connectionId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
    /**
     * Accept a connection request as inviter (by sending a connection response message) for the connection with the specified connection id.
     * This is not needed when auto accepting of connection is enabled.
     */
    async acceptRequest(connectionId) {
        try {
            const connection = await this.agent.connections.acceptRequest(connectionId);
            return connection.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`connection with connectionId "${connectionId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
    /**
     * Accept a connection response as invitee (by sending a trust ping message) for the connection with the specified connection id.
     * This is not needed when auto accepting of connection is enabled.
     */
    async acceptResponse(connectionId) {
        try {
            const connection = await this.agent.connections.acceptResponse(connectionId);
            return connection.toJSON();
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`connection with connectionId "${connectionId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
    /**
     * Deletes a connectionRecord in the connectionRepository.
     */
    async deleteConnection(connectionId) {
        try {
            await this.agent.connections.deleteById(connectionId);
        }
        catch (error) {
            if (error instanceof core_1.RecordNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`connection with connectionId "${connectionId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
};
__decorate([
    (0, typedi_1.Inject)(),
    __metadata("design:type", core_1.Agent)
], ConnectionController.prototype, "agent", void 0);
__decorate([
    (0, routing_controllers_1.Get)('/:connectionId'),
    __param(0, (0, routing_controllers_1.Param)('connectionId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "getConnectionById", null);
__decorate([
    (0, routing_controllers_1.Get)('/'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "getAllConnections", null);
__decorate([
    (0, routing_controllers_1.Post)('/create-invitation'),
    __param(0, (0, routing_controllers_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [InvitationConfigRequest_1.InvitationConfigRequest]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "createInvitation", null);
__decorate([
    (0, routing_controllers_1.Post)('/receive-invitation'),
    __param(0, (0, routing_controllers_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [ReceiveInvitationRequest_1.ReceiveInvitationRequest]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "receiveInvitation", null);
__decorate([
    (0, routing_controllers_1.Post)('/receive-invitation-url'),
    __param(0, (0, routing_controllers_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [ReceiveInvitationByUrlRequest_1.ReceiveInvitationByUrlRequest]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "receiveInvitationByUrl", null);
__decorate([
    (0, routing_controllers_1.Post)('/:connectionId/accept-invitation'),
    __param(0, (0, routing_controllers_1.Param)('connectionId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "acceptInvitation", null);
__decorate([
    (0, routing_controllers_1.Post)('/:connectionId/accept-request'),
    __param(0, (0, routing_controllers_1.Param)('connectionId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "acceptRequest", null);
__decorate([
    (0, routing_controllers_1.Post)('/:connectionId/accept-response'),
    __param(0, (0, routing_controllers_1.Param)('connectionId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "acceptResponse", null);
__decorate([
    (0, routing_controllers_1.Delete)('/:connectionId'),
    (0, routing_controllers_1.OnUndefined)(204),
    __param(0, (0, routing_controllers_1.Param)('connectionId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ConnectionController.prototype, "deleteConnection", null);
ConnectionController = __decorate([
    (0, routing_controllers_1.JsonController)('/connections'),
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [core_1.Agent])
], ConnectionController);
exports.ConnectionController = ConnectionController;
//# sourceMappingURL=ConnectionController.js.map