"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialDefinitionController = void 0;
const core_1 = require("@aries-framework/core");
const LedgerError_1 = require("@aries-framework/core/build/modules/ledger/error/LedgerError");
const LedgerNotFoundError_1 = require("@aries-framework/core/build/modules/ledger/error/LedgerNotFoundError");
const indyError_1 = require("@aries-framework/core/build/utils/indyError");
const routing_controllers_1 = require("routing-controllers");
const typedi_1 = require("typedi");
const CredentialDefinitionRequest_1 = require("../../schemas/CredentialDefinitionRequest");
let CredentialDefinitionController = class CredentialDefinitionController {
    constructor(agent) {
        this.agent = agent;
    }
    /**
     * Retrieve credentialDefinition by credentialDefinitionId
     */
    async getCredentialDefinitionById(credentialDefinitionId) {
        try {
            return await this.agent.ledger.getCredentialDefinition(credentialDefinitionId);
        }
        catch (error) {
            if (error instanceof LedgerNotFoundError_1.LedgerNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`credential definition with credentialDefinitionId "${credentialDefinitionId}" not found.`);
            }
            else if (error instanceof LedgerError_1.LedgerError && error.cause instanceof core_1.IndySdkError) {
                if ((0, indyError_1.isIndyError)(error.cause.cause, 'CommonInvalidStructure')) {
                    throw new routing_controllers_1.BadRequestError(`credentialDefinitionId "${credentialDefinitionId}" has invalid structure.`);
                }
            }
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
    /**
     * Creates a new CredentialDefinition.
     * Returns CredentialDefinitionId and CredentialDefinition
     */
    async createCredentialDefinition(credentialDefinitionRequest) {
        try {
            const schema = await this.agent.ledger.getSchema(credentialDefinitionRequest.schemaId);
            return await this.agent.ledger.registerCredentialDefinition({
                schema,
                supportRevocation: credentialDefinitionRequest.supportRevocation,
                tag: credentialDefinitionRequest.tag,
            });
        }
        catch (error) {
            if (error instanceof LedgerNotFoundError_1.LedgerNotFoundError) {
                throw new routing_controllers_1.NotFoundError(`schema with schemaId "${credentialDefinitionRequest.schemaId}" not found.`);
            }
            throw new routing_controllers_1.InternalServerError(`something went wrong: ${error}`);
        }
    }
};
__decorate([
    (0, typedi_1.Inject)(),
    __metadata("design:type", core_1.Agent)
], CredentialDefinitionController.prototype, "agent", void 0);
__decorate([
    (0, routing_controllers_1.Get)('/:credentialDefinitionId'),
    __param(0, (0, routing_controllers_1.Param)('credentialDefinitionId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], CredentialDefinitionController.prototype, "getCredentialDefinitionById", null);
__decorate([
    (0, routing_controllers_1.Post)('/'),
    __param(0, (0, routing_controllers_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CredentialDefinitionRequest_1.CredentialDefinitionRequest]),
    __metadata("design:returntype", Promise)
], CredentialDefinitionController.prototype, "createCredentialDefinition", null);
CredentialDefinitionController = __decorate([
    (0, routing_controllers_1.JsonController)('/credential-definitions'),
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [core_1.Agent])
], CredentialDefinitionController);
exports.CredentialDefinitionController = CredentialDefinitionController;
//# sourceMappingURL=CredentialDefinitionController.js.map