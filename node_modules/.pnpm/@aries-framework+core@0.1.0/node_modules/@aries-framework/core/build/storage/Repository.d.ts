import type { BaseRecord } from './BaseRecord';
import type { BaseRecordConstructor, Query, StorageService } from './StorageService';
export declare class Repository<T extends BaseRecord<any, any, any>> {
    private storageService;
    private recordClass;
    constructor(recordClass: BaseRecordConstructor<T>, storageService: StorageService<T>);
    /** @inheritDoc {StorageService#save} */
    save(record: T): Promise<void>;
    /** @inheritDoc {StorageService#update} */
    update(record: T): Promise<void>;
    /** @inheritDoc {StorageService#delete} */
    delete(record: T): Promise<void>;
    /** @inheritDoc {StorageService#getById} */
    getById(id: string): Promise<T>;
    /**
     * Find record by id. Returns null if no record is found
     * @param id the id of the record to retrieve
     * @returns
     */
    findById(id: string): Promise<T | null>;
    /** @inheritDoc {StorageService#getAll} */
    getAll(): Promise<T[]>;
    /** @inheritDoc {StorageService#findByQuery} */
    findByQuery(query: Query<T>): Promise<T[]>;
    /**
     * Find a single record by query. Returns null if not found.
     * @param query the query
     * @returns the record, or null if not found
     * @throws {RecordDuplicateError} if multiple records are found for the given query
     */
    findSingleByQuery(query: Query<T>): Promise<T | null>;
    /**
     * Find a single record by query. Throws if not found
     * @param query the query
     * @returns the record
     * @throws {RecordDuplicateError} if multiple records are found for the given query
     * @throws {RecordNotFoundError} if no record is found for the given query
     */
    getSingleByQuery(query: Query<T>): Promise<T>;
}
