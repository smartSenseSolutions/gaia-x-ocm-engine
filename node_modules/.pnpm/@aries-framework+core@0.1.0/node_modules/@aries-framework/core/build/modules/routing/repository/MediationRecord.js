"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediationRecord = void 0;
const error_1 = require("../../../error");
const BaseRecord_1 = require("../../../storage/BaseRecord");
const uuid_1 = require("../../../utils/uuid");
const MediationState_1 = require("../models/MediationState");
class MediationRecord extends BaseRecord_1.BaseRecord {
    constructor(props) {
        var _a, _b, _c;
        super();
        this.type = MediationRecord.type;
        if (props) {
            this.id = (_a = props.id) !== null && _a !== void 0 ? _a : uuid_1.uuid();
            this.createdAt = (_b = props.createdAt) !== null && _b !== void 0 ? _b : new Date();
            this.connectionId = props.connectionId;
            this.threadId = props.threadId;
            this.recipientKeys = props.recipientKeys || [];
            this.routingKeys = props.routingKeys || [];
            this.state = props.state;
            this.role = props.role;
            this.endpoint = (_c = props.endpoint) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    getTags() {
        return Object.assign(Object.assign({}, this._tags), { state: this.state, role: this.role, connectionId: this.connectionId, threadId: this.threadId, recipientKeys: this.recipientKeys });
    }
    get isReady() {
        return this.state === MediationState_1.MediationState.Granted;
    }
    assertReady() {
        if (!this.isReady) {
            throw new error_1.AriesFrameworkError(`Mediation record is not ready to be used. Expected ${MediationState_1.MediationState.Granted}, found invalid state ${this.state}`);
        }
    }
    assertState(expectedStates) {
        if (!Array.isArray(expectedStates)) {
            expectedStates = [expectedStates];
        }
        if (!expectedStates.includes(this.state)) {
            throw new error_1.AriesFrameworkError(`Mediation record is in invalid state ${this.state}. Valid states are: ${expectedStates.join(', ')}.`);
        }
    }
    assertRole(expectedRole) {
        if (this.role !== expectedRole) {
            throw new error_1.AriesFrameworkError(`Mediation record has invalid role ${this.role}. Expected role ${expectedRole}.`);
        }
    }
}
exports.MediationRecord = MediationRecord;
MediationRecord.type = 'MediationRecord';
//# sourceMappingURL=MediationRecord.js.map