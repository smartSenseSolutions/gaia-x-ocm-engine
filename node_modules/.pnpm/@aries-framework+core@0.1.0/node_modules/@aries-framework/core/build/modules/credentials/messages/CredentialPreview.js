"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialPreview = exports.CredentialPreviewAttribute = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const JsonTransformer_1 = require("../../../utils/JsonTransformer");
const messageType_1 = require("../../../utils/messageType");
class CredentialPreviewAttribute {
    constructor(options) {
        this.mimeType = 'text/plain';
        if (options) {
            this.name = options.name;
            this.mimeType = options.mimeType;
            this.value = options.value;
        }
    }
    toJSON() {
        return JsonTransformer_1.JsonTransformer.toJSON(this);
    }
}
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], CredentialPreviewAttribute.prototype, "name", void 0);
__decorate([
    class_transformer_1.Expose({ name: 'mime-type' }),
    class_validator_1.IsOptional(),
    class_validator_1.IsMimeType(),
    __metadata("design:type", String)
], CredentialPreviewAttribute.prototype, "mimeType", void 0);
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], CredentialPreviewAttribute.prototype, "value", void 0);
exports.CredentialPreviewAttribute = CredentialPreviewAttribute;
/**
 * Credential preview inner message class.
 *
 * This is not a message but an inner object for other messages in this protocol. It is used construct a preview of the data for the credential.
 *
 * @see https://github.com/hyperledger/aries-rfcs/blob/master/features/0036-issue-credential/README.md#preview-credential
 */
class CredentialPreview {
    constructor(options) {
        this.type = CredentialPreview.type;
        if (options) {
            this.attributes = options.attributes;
        }
    }
    toJSON() {
        return JsonTransformer_1.JsonTransformer.toJSON(this);
    }
    /**
     * Create a credential preview from a record with name and value entries.
     *
     * @example
     * const preview = CredentialPreview.fromRecord({
     *   name: "Bob",
     *   age: "20"
     * })
     */
    static fromRecord(record) {
        const attributes = Object.entries(record).map(([name, value]) => new CredentialPreviewAttribute({
            name,
            mimeType: 'text/plain',
            value,
        }));
        return new CredentialPreview({
            attributes,
        });
    }
}
CredentialPreview.type = 'https://didcomm.org/issue-credential/1.0/credential-preview';
__decorate([
    class_transformer_1.Expose({ name: '@type' }),
    class_validator_1.Equals(CredentialPreview.type),
    class_transformer_1.Transform(({ value }) => messageType_1.replaceLegacyDidSovPrefix(value), {
        toClassOnly: true,
    }),
    __metadata("design:type", Object)
], CredentialPreview.prototype, "type", void 0);
__decorate([
    class_transformer_1.Type(() => CredentialPreviewAttribute),
    class_validator_1.ValidateNested({ each: true }),
    class_validator_1.IsInstance(CredentialPreviewAttribute, { each: true }),
    __metadata("design:type", Array)
], CredentialPreview.prototype, "attributes", void 0);
exports.CredentialPreview = CredentialPreview;
//# sourceMappingURL=CredentialPreview.js.map