"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicMessageService = void 0;
const tsyringe_1 = require("tsyringe");
const EventEmitter_1 = require("../../../agent/EventEmitter");
const BasicMessageEvents_1 = require("../BasicMessageEvents");
const BasicMessageRole_1 = require("../BasicMessageRole");
const messages_1 = require("../messages");
const repository_1 = require("../repository");
let BasicMessageService = class BasicMessageService {
    constructor(basicMessageRepository, eventEmitter) {
        this.basicMessageRepository = basicMessageRepository;
        this.eventEmitter = eventEmitter;
    }
    async createMessage(message, connectionRecord) {
        const basicMessage = new messages_1.BasicMessage({ content: message });
        const basicMessageRecord = new repository_1.BasicMessageRecord({
            id: basicMessage.id,
            sentTime: basicMessage.sentTime.toISOString(),
            content: basicMessage.content,
            connectionId: connectionRecord.id,
            role: BasicMessageRole_1.BasicMessageRole.Sender,
        });
        await this.basicMessageRepository.save(basicMessageRecord);
        this.eventEmitter.emit({
            type: BasicMessageEvents_1.BasicMessageEventTypes.BasicMessageStateChanged,
            payload: { message: basicMessage, basicMessageRecord },
        });
        return basicMessage;
    }
    /**
     * @todo use connection from message context
     */
    async save({ message }, connection) {
        const basicMessageRecord = new repository_1.BasicMessageRecord({
            id: message.id,
            sentTime: message.sentTime.toISOString(),
            content: message.content,
            connectionId: connection.id,
            role: BasicMessageRole_1.BasicMessageRole.Receiver,
        });
        await this.basicMessageRepository.save(basicMessageRecord);
        this.eventEmitter.emit({
            type: BasicMessageEvents_1.BasicMessageEventTypes.BasicMessageStateChanged,
            payload: { message, basicMessageRecord },
        });
    }
    async findAllByQuery(query) {
        return this.basicMessageRepository.findByQuery(query);
    }
};
BasicMessageService = __decorate([
    tsyringe_1.scoped(tsyringe_1.Lifecycle.ContainerScoped),
    __metadata("design:paramtypes", [repository_1.BasicMessageRepository, EventEmitter_1.EventEmitter])
], BasicMessageService);
exports.BasicMessageService = BasicMessageService;
//# sourceMappingURL=BasicMessageService.js.map