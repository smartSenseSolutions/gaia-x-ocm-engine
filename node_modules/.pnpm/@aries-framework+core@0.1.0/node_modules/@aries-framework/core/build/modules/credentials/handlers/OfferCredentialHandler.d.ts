import type { AgentConfig } from '../../../agent/AgentConfig';
import type { Handler, HandlerInboundMessage } from '../../../agent/Handler';
import type { MediationRecipientService } from '../../routing/services/MediationRecipientService';
import type { CredentialResponseCoordinator } from '../CredentialResponseCoordinator';
import type { CredentialService } from '../services';
import { OfferCredentialMessage } from '../messages';
export declare class OfferCredentialHandler implements Handler {
    private credentialService;
    private agentConfig;
    private credentialResponseCoordinator;
    private mediationRecipientService;
    supportedMessages: (typeof OfferCredentialMessage)[];
    constructor(credentialService: CredentialService, agentConfig: AgentConfig, credentialResponseCoordinator: CredentialResponseCoordinator, mediationRecipientService: MediationRecipientService);
    handle(messageContext: HandlerInboundMessage<OfferCredentialHandler>): Promise<import("../../../types").OutboundMessage<import("../messages").RequestCredentialMessage> | import("../../../types").OutboundServiceMessage<import("../messages").RequestCredentialMessage> | undefined>;
    private createRequest;
}
