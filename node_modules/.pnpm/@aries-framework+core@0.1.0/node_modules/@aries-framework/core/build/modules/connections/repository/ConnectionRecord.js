"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionRecord = void 0;
const class_transformer_1 = require("class-transformer");
const error_1 = require("../../../error");
const BaseRecord_1 = require("../../../storage/BaseRecord");
const uuid_1 = require("../../../utils/uuid");
const ConnectionInvitationMessage_1 = require("../messages/ConnectionInvitationMessage");
const ConnectionState_1 = require("../models/ConnectionState");
const DidDoc_1 = require("../models/did/DidDoc");
class ConnectionRecord extends BaseRecord_1.BaseRecord {
    constructor(props) {
        var _a, _b, _c;
        super();
        this.type = ConnectionRecord.type;
        if (props) {
            this.id = (_a = props.id) !== null && _a !== void 0 ? _a : uuid_1.uuid();
            this.createdAt = (_b = props.createdAt) !== null && _b !== void 0 ? _b : new Date();
            this.did = props.did;
            this.didDoc = props.didDoc;
            this.verkey = props.verkey;
            this.theirDid = props.theirDid;
            this.theirDidDoc = props.theirDidDoc;
            this.theirLabel = props.theirLabel;
            this.state = props.state;
            this.role = props.role;
            this.alias = props.alias;
            this.autoAcceptConnection = props.autoAcceptConnection;
            this._tags = (_c = props.tags) !== null && _c !== void 0 ? _c : {};
            this.invitation = props.invitation;
            this.threadId = props.threadId;
            this.imageUrl = props.imageUrl;
            this.multiUseInvitation = props.multiUseInvitation;
            this.mediatorId = props.mediatorId;
            this.errorMessage = props.errorMessage;
        }
    }
    getTags() {
        var _a;
        const invitationKey = (((_a = this.invitation) === null || _a === void 0 ? void 0 : _a.recipientKeys) && this.invitation.recipientKeys[0]) || undefined;
        return Object.assign(Object.assign({}, this._tags), { state: this.state, role: this.role, invitationKey, threadId: this.threadId, verkey: this.verkey, theirKey: this.theirKey || undefined, mediatorId: this.mediatorId });
    }
    get myKey() {
        var _a, _b;
        const [service] = (_b = (_a = this.didDoc) === null || _a === void 0 ? void 0 : _a.didCommServices) !== null && _b !== void 0 ? _b : [];
        if (!service) {
            return null;
        }
        return service.recipientKeys[0];
    }
    get theirKey() {
        var _a, _b;
        const [service] = (_b = (_a = this.theirDidDoc) === null || _a === void 0 ? void 0 : _a.didCommServices) !== null && _b !== void 0 ? _b : [];
        if (!service) {
            return null;
        }
        return service.recipientKeys[0];
    }
    get isReady() {
        return [ConnectionState_1.ConnectionState.Responded, ConnectionState_1.ConnectionState.Complete].includes(this.state);
    }
    assertReady() {
        if (!this.isReady) {
            throw new error_1.AriesFrameworkError(`Connection record is not ready to be used. Expected ${ConnectionState_1.ConnectionState.Responded} or ${ConnectionState_1.ConnectionState.Complete}, found invalid state ${this.state}`);
        }
    }
    assertState(expectedStates) {
        if (!Array.isArray(expectedStates)) {
            expectedStates = [expectedStates];
        }
        if (!expectedStates.includes(this.state)) {
            throw new error_1.AriesFrameworkError(`Connection record is in invalid state ${this.state}. Valid states are: ${expectedStates.join(', ')}.`);
        }
    }
    assertRole(expectedRole) {
        if (this.role !== expectedRole) {
            throw new error_1.AriesFrameworkError(`Connection record has invalid role ${this.role}. Expected role ${expectedRole}.`);
        }
    }
}
ConnectionRecord.type = 'ConnectionRecord';
__decorate([
    class_transformer_1.Type(() => DidDoc_1.DidDoc),
    __metadata("design:type", DidDoc_1.DidDoc)
], ConnectionRecord.prototype, "didDoc", void 0);
__decorate([
    class_transformer_1.Type(() => DidDoc_1.DidDoc),
    __metadata("design:type", DidDoc_1.DidDoc)
], ConnectionRecord.prototype, "theirDidDoc", void 0);
__decorate([
    class_transformer_1.Type(() => ConnectionInvitationMessage_1.ConnectionInvitationMessage),
    __metadata("design:type", ConnectionInvitationMessage_1.ConnectionInvitationMessage)
], ConnectionRecord.prototype, "invitation", void 0);
exports.ConnectionRecord = ConnectionRecord;
//# sourceMappingURL=ConnectionRecord.js.map