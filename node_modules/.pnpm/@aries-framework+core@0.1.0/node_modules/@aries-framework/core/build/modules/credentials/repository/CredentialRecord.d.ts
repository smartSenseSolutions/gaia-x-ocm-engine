import type { TagsBase } from '../../../storage/BaseRecord';
import type { AutoAcceptCredential } from '../CredentialAutoAcceptType';
import type { CredentialState } from '../CredentialState';
import type { CredentialMetadata } from './credentialMetadataTypes';
import { Attachment } from '../../../decorators/attachment/Attachment';
import { BaseRecord } from '../../../storage/BaseRecord';
import { CredentialPreviewAttribute, IssueCredentialMessage, OfferCredentialMessage, ProposeCredentialMessage, RequestCredentialMessage } from '../messages';
import { CredentialInfo } from '../models/CredentialInfo';
export interface CredentialRecordProps {
    id?: string;
    createdAt?: Date;
    state: CredentialState;
    connectionId?: string;
    threadId: string;
    credentialId?: string;
    tags?: CustomCredentialTags;
    proposalMessage?: ProposeCredentialMessage;
    offerMessage?: OfferCredentialMessage;
    requestMessage?: RequestCredentialMessage;
    credentialMessage?: IssueCredentialMessage;
    credentialAttributes?: CredentialPreviewAttribute[];
    autoAcceptCredential?: AutoAcceptCredential;
    linkedAttachments?: Attachment[];
    errorMessage?: string;
}
export declare type CustomCredentialTags = TagsBase;
export declare type DefaultCredentialTags = {
    threadId: string;
    connectionId?: string;
    state: CredentialState;
    credentialId?: string;
};
export declare class CredentialRecord extends BaseRecord<DefaultCredentialTags, CustomCredentialTags, CredentialMetadata> {
    connectionId?: string;
    threadId: string;
    credentialId?: string;
    state: CredentialState;
    autoAcceptCredential?: AutoAcceptCredential;
    errorMessage?: string;
    proposalMessage?: ProposeCredentialMessage;
    offerMessage?: OfferCredentialMessage;
    requestMessage?: RequestCredentialMessage;
    credentialMessage?: IssueCredentialMessage;
    credentialAttributes?: CredentialPreviewAttribute[];
    linkedAttachments?: Attachment[];
    static readonly type = "CredentialRecord";
    readonly type = "CredentialRecord";
    constructor(props: CredentialRecordProps);
    getTags(): {
        threadId: string;
        connectionId: string | undefined;
        state: CredentialState;
        credentialId: string | undefined;
    };
    getCredentialInfo(): CredentialInfo | null;
    assertState(expectedStates: CredentialState | CredentialState[]): void;
    assertConnection(currentConnectionId: string): void;
}
