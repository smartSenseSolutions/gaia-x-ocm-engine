"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposeCredentialHandler = void 0;
const helpers_1 = require("../../../agent/helpers");
const messages_1 = require("../messages");
class ProposeCredentialHandler {
    constructor(credentialService, agentConfig, responseCoordinator) {
        this.supportedMessages = [messages_1.ProposeCredentialMessage];
        this.credentialAutoResponseCoordinator = responseCoordinator;
        this.credentialService = credentialService;
        this.agentConfig = agentConfig;
    }
    async handle(messageContext) {
        const credentialRecord = await this.credentialService.processProposal(messageContext);
        if (this.credentialAutoResponseCoordinator.shouldAutoRespondToProposal(credentialRecord)) {
            return await this.createOffer(credentialRecord, messageContext);
        }
    }
    async createOffer(credentialRecord, messageContext) {
        var _a;
        this.agentConfig.logger.info(`Automatically sending offer with autoAccept on ${this.agentConfig.autoAcceptCredentials}`);
        if (!messageContext.connection) {
            this.agentConfig.logger.error('No connection on the messageContext, aborting auto accept');
            return;
        }
        if (!((_a = credentialRecord.proposalMessage) === null || _a === void 0 ? void 0 : _a.credentialProposal)) {
            this.agentConfig.logger.error(`Credential record with id ${credentialRecord.id} is missing required credential proposal`);
            return;
        }
        if (!credentialRecord.proposalMessage.credentialDefinitionId) {
            this.agentConfig.logger.error('Missing required credential definition id');
            return;
        }
        const { message } = await this.credentialService.createOfferAsResponse(credentialRecord, {
            credentialDefinitionId: credentialRecord.proposalMessage.credentialDefinitionId,
            preview: credentialRecord.proposalMessage.credentialProposal,
        });
        return helpers_1.createOutboundMessage(messageContext.connection, message);
    }
}
exports.ProposeCredentialHandler = ProposeCredentialHandler;
//# sourceMappingURL=ProposeCredentialHandler.js.map