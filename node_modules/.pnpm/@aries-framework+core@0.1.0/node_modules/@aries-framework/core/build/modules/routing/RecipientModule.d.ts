import type { ConnectionRecord } from '../connections';
import type { MediationRecord } from './index';
import { AgentConfig } from '../../agent/AgentConfig';
import { Dispatcher } from '../../agent/Dispatcher';
import { EventEmitter } from '../../agent/EventEmitter';
import { MessageSender } from '../../agent/MessageSender';
import { ConnectionService } from '../connections/services';
import { MediationRecipientService } from './services/MediationRecipientService';
export declare class RecipientModule {
    private agentConfig;
    private mediationRecipientService;
    private connectionService;
    private messageSender;
    private eventEmitter;
    private logger;
    constructor(dispatcher: Dispatcher, agentConfig: AgentConfig, mediationRecipientService: MediationRecipientService, connectionService: ConnectionService, messageSender: MessageSender, eventEmitter: EventEmitter);
    initialize(): Promise<void>;
    private sendMessage;
    private openMediationWebSocket;
    private initiateImplicitPickup;
    initiateMessagePickup(mediator: MediationRecord): Promise<import("rxjs").Subscription | undefined>;
    discoverMediation(): Promise<MediationRecord | undefined>;
    pickupMessages(mediatorConnection: ConnectionRecord): Promise<void>;
    setDefaultMediator(mediatorRecord: MediationRecord): Promise<void>;
    requestMediation(connection: ConnectionRecord): Promise<MediationRecord>;
    notifyKeylistUpdate(connection: ConnectionRecord, verkey: string): Promise<void>;
    findByConnectionId(connectionId: string): Promise<MediationRecord | null>;
    getMediators(): Promise<MediationRecord[]>;
    findDefaultMediator(): Promise<MediationRecord | null>;
    findDefaultMediatorConnection(): Promise<ConnectionRecord | null>;
    requestAndAwaitGrant(connection: ConnectionRecord, timeoutMs?: number): Promise<MediationRecord>;
    provision(mediatorConnInvite: string): Promise<MediationRecord | null>;
    private registerHandlers;
}
