import type { AgentConfig } from '../../agent/AgentConfig';
import type * as Indy from 'indy-sdk';
export interface IndyPoolConfig {
    genesisPath?: string;
    genesisTransactions?: string;
    id: string;
    isProduction: boolean;
}
export declare class IndyPool {
    private indy;
    private logger;
    private fileSystem;
    private poolConfig;
    private _poolHandle?;
    authorAgreement?: AuthorAgreement | null;
    constructor(agentConfig: AgentConfig, poolConfig: IndyPoolConfig);
    get id(): string;
    get config(): IndyPoolConfig;
    close(): Promise<void>;
    delete(): Promise<void>;
    connect(): Promise<number>;
    private submitRequest;
    submitReadRequest(request: Indy.LedgerRequest): Promise<Indy.LedgerReadReplyResponse>;
    submitWriteRequest(request: Indy.LedgerRequest): Promise<Indy.LedgerWriteReplyResponse>;
    private getPoolHandle;
    private getGenesisPath;
}
export interface AuthorAgreement {
    digest: string;
    version: string;
    text: string;
    ratification_ts: number;
    acceptanceMechanisms: AcceptanceMechanisms;
}
export interface AcceptanceMechanisms {
    aml: Record<string, string>;
    amlContext: string;
    version: string;
}
