"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestPresentationHandler = void 0;
const helpers_1 = require("../../../agent/helpers");
const ServiceDecorator_1 = require("../../../decorators/service/ServiceDecorator");
const messages_1 = require("../messages");
class RequestPresentationHandler {
    constructor(proofService, agentConfig, proofResponseCoordinator, mediationRecipientService) {
        this.supportedMessages = [messages_1.RequestPresentationMessage];
        this.proofService = proofService;
        this.agentConfig = agentConfig;
        this.proofResponseCoordinator = proofResponseCoordinator;
        this.mediationRecipientService = mediationRecipientService;
    }
    async handle(messageContext) {
        const proofRecord = await this.proofService.processRequest(messageContext);
        if (this.proofResponseCoordinator.shouldAutoRespondToRequest(proofRecord)) {
            return await this.createPresentation(proofRecord, messageContext);
        }
    }
    async createPresentation(record, messageContext) {
        var _a, _b, _c;
        const indyProofRequest = (_a = record.requestMessage) === null || _a === void 0 ? void 0 : _a.indyProofRequest;
        this.agentConfig.logger.info(`Automatically sending presentation with autoAccept on ${this.agentConfig.autoAcceptProofs}`);
        if (!indyProofRequest) {
            return;
        }
        const retrievedCredentials = await this.proofService.getRequestedCredentialsForProofRequest(indyProofRequest, (_b = record.proposalMessage) === null || _b === void 0 ? void 0 : _b.presentationProposal);
        const requestedCredentials = this.proofService.autoSelectCredentialsForProofRequest(retrievedCredentials);
        const { message, proofRecord } = await this.proofService.createPresentation(record, requestedCredentials);
        if (messageContext.connection) {
            return helpers_1.createOutboundMessage(messageContext.connection, message);
        }
        else if ((_c = proofRecord.requestMessage) === null || _c === void 0 ? void 0 : _c.service) {
            // Create ~service decorator
            const routing = await this.mediationRecipientService.getRouting();
            const ourService = new ServiceDecorator_1.ServiceDecorator({
                serviceEndpoint: routing.endpoints[0],
                recipientKeys: [routing.verkey],
                routingKeys: routing.routingKeys,
            });
            const recipientService = proofRecord.requestMessage.service;
            // Set and save ~service decorator to record (to remember our verkey)
            message.service = ourService;
            proofRecord.presentationMessage = message;
            await this.proofService.update(proofRecord);
            return helpers_1.createOutboundServiceMessage({
                payload: message,
                service: recipientService.toDidCommService(),
                senderKey: ourService.recipientKeys[0],
            });
        }
        this.agentConfig.logger.error(`Could not automatically create presentation`);
    }
}
exports.RequestPresentationHandler = RequestPresentationHandler;
//# sourceMappingURL=RequestPresentationHandler.js.map