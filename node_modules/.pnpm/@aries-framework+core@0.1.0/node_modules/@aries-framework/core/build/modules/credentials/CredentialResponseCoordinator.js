"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CredentialResponseCoordinator_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialResponseCoordinator = void 0;
const tsyringe_1 = require("tsyringe");
const AgentConfig_1 = require("../../agent/AgentConfig");
const CredentialAutoAcceptType_1 = require("./CredentialAutoAcceptType");
const CredentialUtils_1 = require("./CredentialUtils");
/**
 * This class handles all the automation with all the messages in the issue credential protocol
 * Every function returns `true` if it should automate the flow and `false` if not
 */
let CredentialResponseCoordinator = CredentialResponseCoordinator_1 = class CredentialResponseCoordinator {
    constructor(agentConfig) {
        this.agentConfig = agentConfig;
    }
    /**
     * Returns the credential auto accept config based on priority:
     *	- The record config takes first priority
     *	- Otherwise the agent config
     *	- Otherwise {@link AutoAcceptCredential.Never} is returned
     */
    static composeAutoAccept(recordConfig, agentConfig) {
        var _a;
        return (_a = recordConfig !== null && recordConfig !== void 0 ? recordConfig : agentConfig) !== null && _a !== void 0 ? _a : CredentialAutoAcceptType_1.AutoAcceptCredential.Never;
    }
    /**
     * Checks whether it should automatically respond to a proposal
     */
    shouldAutoRespondToProposal(credentialRecord) {
        const autoAccept = CredentialResponseCoordinator_1.composeAutoAccept(credentialRecord.autoAcceptCredential, this.agentConfig.autoAcceptCredentials);
        if (autoAccept === CredentialAutoAcceptType_1.AutoAcceptCredential.Always) {
            return true;
        }
        else if (autoAccept === CredentialAutoAcceptType_1.AutoAcceptCredential.ContentApproved) {
            return (this.areProposalValuesValid(credentialRecord) && this.areProposalAndOfferDefinitionIdEqual(credentialRecord));
        }
        return false;
    }
    /**
     * Checks whether it should automatically respond to an offer
     */
    shouldAutoRespondToOffer(credentialRecord) {
        const autoAccept = CredentialResponseCoordinator_1.composeAutoAccept(credentialRecord.autoAcceptCredential, this.agentConfig.autoAcceptCredentials);
        if (autoAccept === CredentialAutoAcceptType_1.AutoAcceptCredential.Always) {
            return true;
        }
        else if (autoAccept === CredentialAutoAcceptType_1.AutoAcceptCredential.ContentApproved) {
            return this.areOfferValuesValid(credentialRecord) && this.areProposalAndOfferDefinitionIdEqual(credentialRecord);
        }
        return false;
    }
    /**
     * Checks whether it should automatically respond to a request
     */
    shouldAutoRespondToRequest(credentialRecord) {
        const autoAccept = CredentialResponseCoordinator_1.composeAutoAccept(credentialRecord.autoAcceptCredential, this.agentConfig.autoAcceptCredentials);
        if (autoAccept === CredentialAutoAcceptType_1.AutoAcceptCredential.Always) {
            return true;
        }
        else if (autoAccept === CredentialAutoAcceptType_1.AutoAcceptCredential.ContentApproved) {
            return this.isRequestDefinitionIdValid(credentialRecord);
        }
        return false;
    }
    /**
     * Checks whether it should automatically respond to the issuance of a credential
     */
    shouldAutoRespondToIssue(credentialRecord) {
        const autoAccept = CredentialResponseCoordinator_1.composeAutoAccept(credentialRecord.autoAcceptCredential, this.agentConfig.autoAcceptCredentials);
        if (autoAccept === CredentialAutoAcceptType_1.AutoAcceptCredential.Always) {
            return true;
        }
        else if (autoAccept === CredentialAutoAcceptType_1.AutoAcceptCredential.ContentApproved) {
            return this.areCredentialValuesValid(credentialRecord);
        }
        return false;
    }
    areProposalValuesValid(credentialRecord) {
        const { proposalMessage, credentialAttributes } = credentialRecord;
        if (proposalMessage && proposalMessage.credentialProposal && credentialAttributes) {
            const proposalValues = CredentialUtils_1.CredentialUtils.convertAttributesToValues(proposalMessage.credentialProposal.attributes);
            const defaultValues = CredentialUtils_1.CredentialUtils.convertAttributesToValues(credentialAttributes);
            if (CredentialUtils_1.CredentialUtils.checkValuesMatch(proposalValues, defaultValues)) {
                return true;
            }
        }
        return false;
    }
    areOfferValuesValid(credentialRecord) {
        const { offerMessage, credentialAttributes } = credentialRecord;
        if (offerMessage && credentialAttributes) {
            const offerValues = CredentialUtils_1.CredentialUtils.convertAttributesToValues(offerMessage.credentialPreview.attributes);
            const defaultValues = CredentialUtils_1.CredentialUtils.convertAttributesToValues(credentialAttributes);
            if (CredentialUtils_1.CredentialUtils.checkValuesMatch(offerValues, defaultValues)) {
                return true;
            }
        }
        return false;
    }
    areCredentialValuesValid(credentialRecord) {
        if (credentialRecord.credentialAttributes && credentialRecord.credentialMessage) {
            const indyCredential = credentialRecord.credentialMessage.indyCredential;
            if (!indyCredential) {
                this.agentConfig.logger.error(`Missing required base64 or json encoded attachment data for credential`);
                return false;
            }
            const credentialMessageValues = indyCredential.values;
            const defaultValues = CredentialUtils_1.CredentialUtils.convertAttributesToValues(credentialRecord.credentialAttributes);
            if (CredentialUtils_1.CredentialUtils.checkValuesMatch(credentialMessageValues, defaultValues)) {
                return true;
            }
        }
        return false;
    }
    areProposalAndOfferDefinitionIdEqual(credentialRecord) {
        var _a, _b, _c;
        const proposalCredentialDefinitionId = (_a = credentialRecord.proposalMessage) === null || _a === void 0 ? void 0 : _a.credentialDefinitionId;
        const offerCredentialDefinitionId = (_c = (_b = credentialRecord.offerMessage) === null || _b === void 0 ? void 0 : _b.indyCredentialOffer) === null || _c === void 0 ? void 0 : _c.cred_def_id;
        return proposalCredentialDefinitionId === offerCredentialDefinitionId;
    }
    isRequestDefinitionIdValid(credentialRecord) {
        var _a, _b, _c, _d, _e, _f;
        if (credentialRecord.proposalMessage || credentialRecord.offerMessage) {
            const previousCredentialDefinitionId = (_c = (_b = (_a = credentialRecord.offerMessage) === null || _a === void 0 ? void 0 : _a.indyCredentialOffer) === null || _b === void 0 ? void 0 : _b.cred_def_id) !== null && _c !== void 0 ? _c : (_d = credentialRecord.proposalMessage) === null || _d === void 0 ? void 0 : _d.credentialDefinitionId;
            if (previousCredentialDefinitionId === ((_f = (_e = credentialRecord.requestMessage) === null || _e === void 0 ? void 0 : _e.indyCredentialRequest) === null || _f === void 0 ? void 0 : _f.cred_def_id)) {
                return true;
            }
        }
        return false;
    }
};
CredentialResponseCoordinator = CredentialResponseCoordinator_1 = __decorate([
    tsyringe_1.scoped(tsyringe_1.Lifecycle.ContainerScoped),
    __metadata("design:paramtypes", [AgentConfig_1.AgentConfig])
], CredentialResponseCoordinator);
exports.CredentialResponseCoordinator = CredentialResponseCoordinator;
//# sourceMappingURL=CredentialResponseCoordinator.js.map