"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndyPool = void 0;
const error_1 = require("../../error");
const indyError_1 = require("../../utils/indyError");
const LedgerError_1 = require("./error/LedgerError");
const ledgerUtil_1 = require("./ledgerUtil");
class IndyPool {
    constructor(agentConfig, poolConfig) {
        this.indy = agentConfig.agentDependencies.indy;
        this.poolConfig = poolConfig;
        this.fileSystem = agentConfig.fileSystem;
        this.logger = agentConfig.logger;
        // Listen to stop$ (shutdown) and close pool
        agentConfig.stop$.subscribe(async () => {
            if (this._poolHandle) {
                await this.close();
            }
        });
    }
    get id() {
        return this.poolConfig.id;
    }
    get config() {
        return this.poolConfig;
    }
    async close() {
        const poolHandle = this._poolHandle;
        if (!poolHandle) {
            return;
        }
        this._poolHandle = undefined;
        // FIXME: Add type to indy-sdk
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        await this.indy.closePoolLedger(poolHandle);
    }
    async delete() {
        // Close the pool if currently open
        if (this._poolHandle) {
            await this.close();
        }
        // FIXME: Add type to indy-sdk
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        await this.indy.deletePoolLedgerConfig(this.agentConfig.poolName);
    }
    async connect() {
        const poolName = this.poolConfig.id;
        const genesisPath = await this.getGenesisPath();
        if (!genesisPath) {
            throw new error_1.AriesFrameworkError('Cannot connect to ledger without genesis file');
        }
        this.logger.debug(`Connecting to ledger pool '${poolName}'`, { genesisPath });
        await this.indy.setProtocolVersion(2);
        try {
            this._poolHandle = await this.indy.openPoolLedger(poolName);
            return this._poolHandle;
        }
        catch (error) {
            if (!indyError_1.isIndyError(error, 'PoolLedgerNotCreatedError')) {
                throw indyError_1.isIndyError(error) ? new error_1.IndySdkError(error) : error;
            }
        }
        this.logger.debug(`Pool '${poolName}' does not exist yet, creating.`, {
            indyError: 'PoolLedgerNotCreatedError',
        });
        try {
            await this.indy.createPoolLedgerConfig(poolName, { genesis_txn: genesisPath });
            this._poolHandle = await this.indy.openPoolLedger(poolName);
            return this._poolHandle;
        }
        catch (error) {
            throw indyError_1.isIndyError(error) ? new error_1.IndySdkError(error) : error;
        }
    }
    async submitRequest(request) {
        return this.indy.submitRequest(await this.getPoolHandle(), request);
    }
    async submitReadRequest(request) {
        const response = await this.submitRequest(request);
        if (ledgerUtil_1.isLedgerRejectResponse(response)) {
            throw new LedgerError_1.LedgerError(`Ledger '${this.id}' rejected read transaction request: ${response.reason}`);
        }
        return response;
    }
    async submitWriteRequest(request) {
        const response = await this.submitRequest(request);
        if (ledgerUtil_1.isLedgerRejectResponse(response)) {
            throw new LedgerError_1.LedgerError(`Ledger '${this.id}' rejected write transaction request: ${response.reason}`);
        }
        return response;
    }
    async getPoolHandle() {
        if (!this._poolHandle) {
            return this.connect();
        }
        return this._poolHandle;
    }
    async getGenesisPath() {
        // If the path is already provided return it
        if (this.poolConfig.genesisPath)
            return this.poolConfig.genesisPath;
        // Determine the genesisPath
        const genesisPath = this.fileSystem.basePath + `/afj/genesis-${this.poolConfig.id}.txn`;
        // Store genesis data if provided
        if (this.poolConfig.genesisTransactions) {
            await this.fileSystem.write(genesisPath, this.poolConfig.genesisTransactions);
            this.poolConfig.genesisPath = genesisPath;
            return genesisPath;
        }
        // No genesisPath
        return null;
    }
}
exports.IndyPool = IndyPool;
//# sourceMappingURL=IndyPool.js.map