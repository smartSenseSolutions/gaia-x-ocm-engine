import type * as Indy from 'indy-sdk';
import { AgentConfig } from '../../../agent/AgentConfig';
import { IndyWallet } from '../../../wallet/IndyWallet';
export declare class IndyHolderService {
    private indy;
    private wallet;
    constructor(agentConfig: AgentConfig, wallet: IndyWallet);
    createProof({ proofRequest, requestedCredentials, schemas, credentialDefinitions, revocationStates, }: CreateProofOptions): Promise<Indy.IndyProof>;
    /**
     * Store a credential in the wallet.
     *
     * @returns The credential id
     */
    storeCredential({ credentialRequestMetadata, credential, credentialDefinition, credentialId, revocationRegistryDefinitions, }: StoreCredentialOptions): Promise<Indy.CredentialId>;
    /**
     * Get a credential stored in the wallet by id.
     *
     * @param credentialId the id (referent) of the credential
     * @throws {Error} if the credential is not found
     * @returns the credential
     *
     * @todo handle record not found
     */
    getCredential(credentialId: Indy.CredentialId): Promise<Indy.IndyCredentialInfo>;
    /**
     * Create a credential request for the given credential offer.
     *
     * @returns The credential request and the credential request metadata
     */
    createCredentialRequest({ holderDid, credentialOffer, credentialDefinition, }: CreateCredentialRequestOptions): Promise<[Indy.CredReq, Indy.CredReqMetadata]>;
    /**
     * Retrieve the credentials that are available for an attribute referent in the proof request.
     *
     * @param proofRequest The proof request to retrieve the credentials for
     * @param attributeReferent An attribute referent from the proof request to retrieve the credentials for
     * @param start Starting index
     * @param limit Maximum number of records to return
     *
     * @returns List of credentials that are available for building a proof for the given proof request
     *
     */
    getCredentialsForProofRequest({ proofRequest, attributeReferent, start, limit, extraQuery, }: GetCredentialForProofRequestOptions): Promise<Indy.IndyCredential[]>;
    private fetchCredentialsForReferent;
}
export interface GetCredentialForProofRequestOptions {
    proofRequest: Indy.IndyProofRequest;
    attributeReferent: string;
    start?: number;
    limit?: number;
    extraQuery?: Indy.ReferentWalletQuery;
}
export interface CreateCredentialRequestOptions {
    holderDid: string;
    credentialOffer: Indy.CredOffer;
    credentialDefinition: Indy.CredDef;
}
export interface StoreCredentialOptions {
    credentialRequestMetadata: Indy.CredReqMetadata;
    credential: Indy.Cred;
    credentialDefinition: Indy.CredDef;
    credentialId?: Indy.CredentialId;
    revocationRegistryDefinitions?: Indy.RevRegsDefs;
}
export interface CreateProofOptions {
    proofRequest: Indy.IndyProofRequest;
    requestedCredentials: Indy.IndyRequestedCredentials;
    schemas: Indy.Schemas;
    credentialDefinitions: Indy.CredentialDefs;
    revocationStates?: Indy.RevStates;
}
