"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PresentationPreview = exports.PresentationPreviewPredicate = exports.PresentationPreviewAttribute = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const JsonTransformer_1 = require("../../../utils/JsonTransformer");
const messageType_1 = require("../../../utils/messageType");
const PredicateType_1 = require("../models/PredicateType");
class PresentationPreviewAttribute {
    constructor(options) {
        if (options) {
            this.name = options.name;
            this.credentialDefinitionId = options.credentialDefinitionId;
            this.mimeType = options.mimeType;
            this.value = options.value;
            this.referent = options.referent;
        }
    }
    toJSON() {
        return JsonTransformer_1.JsonTransformer.toJSON(this);
    }
}
__decorate([
    class_transformer_1.Expose({ name: 'cred_def_id' }),
    class_validator_1.IsString(),
    class_validator_1.ValidateIf((o) => o.referent !== undefined),
    __metadata("design:type", String)
], PresentationPreviewAttribute.prototype, "credentialDefinitionId", void 0);
__decorate([
    class_transformer_1.Expose({ name: 'mime-type' }),
    class_validator_1.IsOptional(),
    class_validator_1.IsMimeType(),
    __metadata("design:type", String)
], PresentationPreviewAttribute.prototype, "mimeType", void 0);
__decorate([
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    __metadata("design:type", String)
], PresentationPreviewAttribute.prototype, "value", void 0);
__decorate([
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    __metadata("design:type", String)
], PresentationPreviewAttribute.prototype, "referent", void 0);
exports.PresentationPreviewAttribute = PresentationPreviewAttribute;
class PresentationPreviewPredicate {
    constructor(options) {
        if (options) {
            this.name = options.name;
            this.credentialDefinitionId = options.credentialDefinitionId;
            this.predicate = options.predicate;
            this.threshold = options.threshold;
        }
    }
    toJSON() {
        return JsonTransformer_1.JsonTransformer.toJSON(this);
    }
}
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], PresentationPreviewPredicate.prototype, "name", void 0);
__decorate([
    class_transformer_1.Expose({ name: 'cred_def_id' }),
    class_validator_1.IsString(),
    __metadata("design:type", String)
], PresentationPreviewPredicate.prototype, "credentialDefinitionId", void 0);
__decorate([
    class_validator_1.IsEnum(PredicateType_1.PredicateType),
    __metadata("design:type", String)
], PresentationPreviewPredicate.prototype, "predicate", void 0);
__decorate([
    class_validator_1.IsInt(),
    __metadata("design:type", Number)
], PresentationPreviewPredicate.prototype, "threshold", void 0);
exports.PresentationPreviewPredicate = PresentationPreviewPredicate;
/**
 * Presentation preview inner message class.
 *
 * This is not a message but an inner object for other messages in this protocol. It is used to construct a preview of the data for the presentation.
 *
 * @see https://github.com/hyperledger/aries-rfcs/blob/master/features/0037-present-proof/README.md#presentation-preview
 */
class PresentationPreview {
    constructor(options) {
        var _a, _b;
        this.type = PresentationPreview.type;
        if (options) {
            this.attributes = (_a = options.attributes) !== null && _a !== void 0 ? _a : [];
            this.predicates = (_b = options.predicates) !== null && _b !== void 0 ? _b : [];
        }
    }
    toJSON() {
        return JsonTransformer_1.JsonTransformer.toJSON(this);
    }
}
PresentationPreview.type = 'https://didcomm.org/present-proof/1.0/presentation-preview';
__decorate([
    class_transformer_1.Expose({ name: '@type' }),
    class_validator_1.Equals(PresentationPreview.type),
    class_transformer_1.Transform(({ value }) => messageType_1.replaceLegacyDidSovPrefix(value), {
        toClassOnly: true,
    }),
    __metadata("design:type", Object)
], PresentationPreview.prototype, "type", void 0);
__decorate([
    class_transformer_1.Type(() => PresentationPreviewAttribute),
    class_validator_1.ValidateNested({ each: true }),
    class_validator_1.IsInstance(PresentationPreviewAttribute, { each: true }),
    __metadata("design:type", Array)
], PresentationPreview.prototype, "attributes", void 0);
__decorate([
    class_transformer_1.Type(() => PresentationPreviewPredicate),
    class_validator_1.ValidateNested({ each: true }),
    class_validator_1.IsInstance(PresentationPreviewPredicate, { each: true }),
    __metadata("design:type", Array)
], PresentationPreview.prototype, "predicates", void 0);
exports.PresentationPreview = PresentationPreview;
//# sourceMappingURL=PresentationPreview.js.map