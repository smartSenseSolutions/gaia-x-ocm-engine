import { AgentMessage } from '../../../agent/AgentMessage';
export interface BaseInvitationOptions {
    id?: string;
    label: string;
    imageUrl?: string;
}
export interface InlineInvitationOptions {
    recipientKeys: string[];
    serviceEndpoint: string;
    routingKeys?: string[];
}
export interface DIDInvitationOptions {
    did: string;
}
/**
 * Message to invite another agent to create a connection
 *
 * @see https://github.com/hyperledger/aries-rfcs/blob/master/features/0160-connection-protocol/README.md#0-invitation-to-connect
 */
export declare class ConnectionInvitationMessage extends AgentMessage {
    /**
     * Create new ConnectionInvitationMessage instance.
     * @param options
     */
    constructor(options: BaseInvitationOptions & (DIDInvitationOptions | InlineInvitationOptions));
    readonly type = "https://didcomm.org/connections/1.0/invitation";
    static readonly type = "https://didcomm.org/connections/1.0/invitation";
    label: string;
    did?: string;
    recipientKeys?: string[];
    serviceEndpoint?: string;
    routingKeys?: string[];
    imageUrl?: string;
    /**
     * Create an invitation url from this instance
     *
     * @param domain domain name to use for invitation url
     * @returns invitation url with base64 encoded invitation
     */
    toUrl({ domain, useLegacyDidSovPrefix }: {
        domain: string;
        useLegacyDidSovPrefix?: boolean;
    }): string;
    /**
     * Create a `ConnectionInvitationMessage` instance from the `c_i` or `d_m` parameter of an URL
     *
     * @param invitationUrl invitation url containing c_i or d_m parameter
     *
     * @throws Error when url can not be decoded to JSON, or decoded message is not a valid `ConnectionInvitationMessage`
     * @throws Error when the url does not contain c_i or d_m as parameter
     */
    static fromUrl(invitationUrl: string): Promise<ConnectionInvitationMessage>;
}
