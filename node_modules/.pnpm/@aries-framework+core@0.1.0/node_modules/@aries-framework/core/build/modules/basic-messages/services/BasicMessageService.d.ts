import type { InboundMessageContext } from '../../../agent/models/InboundMessageContext';
import type { ConnectionRecord } from '../../connections/repository/ConnectionRecord';
import type { BasicMessageTags } from '../repository';
import { EventEmitter } from '../../../agent/EventEmitter';
import { BasicMessage } from '../messages';
import { BasicMessageRecord, BasicMessageRepository } from '../repository';
export declare class BasicMessageService {
    private basicMessageRepository;
    private eventEmitter;
    constructor(basicMessageRepository: BasicMessageRepository, eventEmitter: EventEmitter);
    createMessage(message: string, connectionRecord: ConnectionRecord): Promise<BasicMessage>;
    /**
     * @todo use connection from message context
     */
    save({ message }: InboundMessageContext<BasicMessage>, connection: ConnectionRecord): Promise<void>;
    findAllByQuery(query: Partial<BasicMessageTags>): Promise<BasicMessageRecord[]>;
}
