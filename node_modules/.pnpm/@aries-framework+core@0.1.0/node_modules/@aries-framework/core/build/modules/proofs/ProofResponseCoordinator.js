"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ProofResponseCoordinator_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProofResponseCoordinator = void 0;
const tsyringe_1 = require("tsyringe");
const AgentConfig_1 = require("../../agent/AgentConfig");
const ProofAutoAcceptType_1 = require("./ProofAutoAcceptType");
/**
 * This class handles all the automation with all the messages in the present proof protocol
 * Every function returns `true` if it should automate the flow and `false` if not
 */
let ProofResponseCoordinator = ProofResponseCoordinator_1 = class ProofResponseCoordinator {
    constructor(agentConfig) {
        this.agentConfig = agentConfig;
    }
    /**
     * Returns the proof auto accept config based on priority:
     *	- The record config takes first priority
     *	- Otherwise the agent config
     *	- Otherwise {@link AutoAcceptProof.Never} is returned
     */
    static composeAutoAccept(recordConfig, agentConfig) {
        var _a;
        return (_a = recordConfig !== null && recordConfig !== void 0 ? recordConfig : agentConfig) !== null && _a !== void 0 ? _a : ProofAutoAcceptType_1.AutoAcceptProof.Never;
    }
    /**
     * Checks whether it should automatically respond to a proposal
     */
    shouldAutoRespondToProposal(proofRecord) {
        const autoAccept = ProofResponseCoordinator_1.composeAutoAccept(proofRecord.autoAcceptProof, this.agentConfig.autoAcceptProofs);
        if (autoAccept === ProofAutoAcceptType_1.AutoAcceptProof.Always) {
            return true;
        }
        return false;
    }
    /**
     * Checks whether it should automatically respond to a request
     */
    shouldAutoRespondToRequest(proofRecord) {
        const autoAccept = ProofResponseCoordinator_1.composeAutoAccept(proofRecord.autoAcceptProof, this.agentConfig.autoAcceptProofs);
        if (autoAccept === ProofAutoAcceptType_1.AutoAcceptProof.Always ||
            (autoAccept === ProofAutoAcceptType_1.AutoAcceptProof.ContentApproved && proofRecord.proposalMessage)) {
            return true;
        }
        return false;
    }
    /**
     * Checks whether it should automatically respond to a presentation of proof
     */
    shouldAutoRespondToPresentation(proofRecord) {
        const autoAccept = ProofResponseCoordinator_1.composeAutoAccept(proofRecord.autoAcceptProof, this.agentConfig.autoAcceptProofs);
        if (autoAccept === ProofAutoAcceptType_1.AutoAcceptProof.Always ||
            (autoAccept === ProofAutoAcceptType_1.AutoAcceptProof.ContentApproved && proofRecord.requestMessage)) {
            return true;
        }
        return false;
    }
};
ProofResponseCoordinator = ProofResponseCoordinator_1 = __decorate([
    tsyringe_1.scoped(tsyringe_1.Lifecycle.ContainerScoped),
    __metadata("design:paramtypes", [AgentConfig_1.AgentConfig])
], ProofResponseCoordinator);
exports.ProofResponseCoordinator = ProofResponseCoordinator;
//# sourceMappingURL=ProofResponseCoordinator.js.map