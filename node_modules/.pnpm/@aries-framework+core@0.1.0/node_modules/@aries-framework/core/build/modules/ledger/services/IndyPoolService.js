"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndyPoolService = exports.DID_POOL_CACHE_LIMIT = exports.DID_POOL_CACHE_ID = void 0;
const tsyringe_1 = require("tsyringe");
const AgentConfig_1 = require("../../../agent/AgentConfig");
const cache_1 = require("../../../cache");
const IndySdkError_1 = require("../../../error/IndySdkError");
const did_1 = require("../../../utils/did");
const indyError_1 = require("../../../utils/indyError");
const promises_1 = require("../../../utils/promises");
const IndyPool_1 = require("../IndyPool");
const LedgerError_1 = require("../error/LedgerError");
const LedgerNotConfiguredError_1 = require("../error/LedgerNotConfiguredError");
const LedgerNotFoundError_1 = require("../error/LedgerNotFoundError");
exports.DID_POOL_CACHE_ID = 'DID_POOL_CACHE';
exports.DID_POOL_CACHE_LIMIT = 500;
let IndyPoolService = class IndyPoolService {
    constructor(agentConfig, cacheRepository) {
        this.pools = agentConfig.indyLedgers.map((poolConfig) => new IndyPool_1.IndyPool(agentConfig, poolConfig));
        this.logger = agentConfig.logger;
        this.indy = agentConfig.agentDependencies.indy;
        this.didCache = new cache_1.PersistedLruCache(exports.DID_POOL_CACHE_ID, exports.DID_POOL_CACHE_LIMIT, cacheRepository);
    }
    /**
     * Get the pool used for writing to the ledger. For now we always use the first pool
     *  as the pool that writes to the ledger
     */
    get ledgerWritePool() {
        if (this.pools.length === 0) {
            throw new LedgerNotConfiguredError_1.LedgerNotConfiguredError("No indy ledgers configured. Provide at least one pool configuration in the 'indyLedgers' agent configuration");
        }
        return this.pools[0];
    }
    /**
     * Get the most appropriate pool for the given did. The algorithm is based on the approach as described in this document:
     * https://docs.google.com/document/d/109C_eMsuZnTnYe2OAd02jAts1vC4axwEKIq7_4dnNVA/edit
     */
    async getPoolForDid(did) {
        var _a;
        const pools = this.pools;
        if (pools.length === 0) {
            throw new LedgerNotConfiguredError_1.LedgerNotConfiguredError("No indy ledgers configured. Provide at least one pool configuration in the 'indyLedgers' agent configuration");
        }
        const cachedNymResponse = await this.didCache.get(did);
        const pool = this.pools.find((pool) => pool.id === (cachedNymResponse === null || cachedNymResponse === void 0 ? void 0 : cachedNymResponse.poolId));
        // If we have the nym response with associated pool in the cache, we'll use that
        if (cachedNymResponse && pool) {
            this.logger.trace(`Found ledger id '${pool.id}' for did '${did}' in cache`);
            return { did: cachedNymResponse.nymResponse, pool };
        }
        const { successful, rejected } = await this.getSettledDidResponsesFromPools(did, pools);
        if (successful.length === 0) {
            const allNotFound = rejected.every((e) => e.reason instanceof LedgerNotFoundError_1.LedgerNotFoundError);
            const rejectedOtherThanNotFound = rejected.filter((e) => !(e.reason instanceof LedgerNotFoundError_1.LedgerNotFoundError));
            // All ledgers returned response that the did was not found
            if (allNotFound) {
                throw new LedgerNotFoundError_1.LedgerNotFoundError(`Did '${did}' not found on any of the ledgers (total ${this.pools.length}).`);
            }
            // one or more of the ledgers returned an unknown error
            throw new LedgerError_1.LedgerError(`Unknown error retrieving did '${did}' from '${rejectedOtherThanNotFound.length}' of '${pools.length}' ledgers`, { cause: rejectedOtherThanNotFound[0].reason });
        }
        // If there are self certified DIDs we always prefer it over non self certified DIDs
        // We take the first self certifying DID as we take the order in the
        // indyLedgers config as the order of preference of ledgers
        let value = (_a = successful.find((response) => did_1.isSelfCertifiedDid(response.value.did.did, response.value.did.verkey))) === null || _a === void 0 ? void 0 : _a.value;
        if (!value) {
            // Split between production and nonProduction ledgers. If there is at least one
            // successful response from a production ledger, only keep production ledgers
            // otherwise we only keep the non production ledgers.
            const production = successful.filter((s) => s.value.pool.config.isProduction);
            const nonProduction = successful.filter((s) => !s.value.pool.config.isProduction);
            const productionOrNonProduction = production.length >= 1 ? production : nonProduction;
            // We take the first value as we take the order in the indyLedgers config as
            // the order of preference of ledgers
            value = productionOrNonProduction[0].value;
        }
        await this.didCache.set(did, {
            nymResponse: value.did,
            poolId: value.pool.id,
        });
        return { pool: value.pool, did: value.did };
    }
    async getSettledDidResponsesFromPools(did, pools) {
        this.logger.trace(`Retrieving did '${did}' from ${pools.length} ledgers`);
        const didResponses = await promises_1.allSettled(pools.map((pool) => this.getDidFromPool(did, pool)));
        const successful = promises_1.onlyFulfilled(didResponses);
        this.logger.trace(`Retrieved ${successful.length} responses from ledgers for did '${did}'`);
        const rejected = promises_1.onlyRejected(didResponses);
        return {
            rejected,
            successful,
        };
    }
    async getDidFromPool(did, pool) {
        try {
            this.logger.trace(`Get public did '${did}' from ledger '${pool.id}'`);
            const request = await this.indy.buildGetNymRequest(null, did);
            this.logger.trace(`Submitting get did request for did '${did}' to ledger '${pool.id}'`);
            const response = await pool.submitReadRequest(request);
            const result = await this.indy.parseGetNymResponse(response);
            this.logger.trace(`Retrieved did '${did}' from ledger '${pool.id}'`, result);
            return {
                did: result,
                pool,
                response,
            };
        }
        catch (error) {
            this.logger.trace(`Error retrieving did '${did}' from ledger '${pool.id}'`, {
                error,
                did,
            });
            if (indyError_1.isIndyError(error, 'LedgerNotFound')) {
                throw new LedgerNotFoundError_1.LedgerNotFoundError(`Did '${did}' not found on ledger ${pool.id}`);
            }
            else {
                throw indyError_1.isIndyError(error) ? new IndySdkError_1.IndySdkError(error) : error;
            }
        }
    }
};
IndyPoolService = __decorate([
    tsyringe_1.scoped(tsyringe_1.Lifecycle.ContainerScoped),
    __metadata("design:paramtypes", [AgentConfig_1.AgentConfig, cache_1.CacheRepository])
], IndyPoolService);
exports.IndyPoolService = IndyPoolService;
//# sourceMappingURL=IndyPoolService.js.map