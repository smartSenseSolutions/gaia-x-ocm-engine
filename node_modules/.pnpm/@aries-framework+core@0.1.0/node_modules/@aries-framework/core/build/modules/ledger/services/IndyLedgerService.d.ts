import type { default as Indy, CredDef, NymRole, Schema } from 'indy-sdk';
import { AgentConfig } from '../../../agent/AgentConfig';
import { IndyWallet } from '../../../wallet/IndyWallet';
import { IndyIssuerService } from '../../indy';
import { IndyPoolService } from './IndyPoolService';
export declare class IndyLedgerService {
    private wallet;
    private indy;
    private logger;
    private indyIssuer;
    private indyPoolService;
    constructor(wallet: IndyWallet, agentConfig: AgentConfig, indyIssuer: IndyIssuerService, indyPoolService: IndyPoolService);
    registerPublicDid(submitterDid: string, targetDid: string, verkey: string, alias: string, role?: NymRole): Promise<string>;
    getPublicDid(did: string): Promise<Indy.GetNymResponse>;
    registerSchema(did: string, schemaTemplate: SchemaTemplate): Promise<Schema>;
    getSchema(schemaId: string): Promise<Indy.Schema>;
    registerCredentialDefinition(did: string, credentialDefinitionTemplate: CredentialDefinitionTemplate): Promise<CredDef>;
    getCredentialDefinition(credentialDefinitionId: string): Promise<Indy.CredDef>;
    private submitWriteRequest;
    private submitReadRequest;
    private signRequest;
    private appendTaa;
    private getTransactionAuthorAgreement;
    private getFirstAcceptanceMechanism;
}
export interface SchemaTemplate {
    name: string;
    version: string;
    attributes: string[];
}
export interface CredentialDefinitionTemplate {
    schema: Schema;
    tag: string;
    signatureType: 'CL';
    supportRevocation: boolean;
}
