"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OfferCredentialHandler = void 0;
const helpers_1 = require("../../../agent/helpers");
const ServiceDecorator_1 = require("../../../decorators/service/ServiceDecorator");
const messages_1 = require("../messages");
class OfferCredentialHandler {
    constructor(credentialService, agentConfig, credentialResponseCoordinator, mediationRecipientService) {
        this.supportedMessages = [messages_1.OfferCredentialMessage];
        this.credentialService = credentialService;
        this.agentConfig = agentConfig;
        this.credentialResponseCoordinator = credentialResponseCoordinator;
        this.mediationRecipientService = mediationRecipientService;
    }
    async handle(messageContext) {
        const credentialRecord = await this.credentialService.processOffer(messageContext);
        if (this.credentialResponseCoordinator.shouldAutoRespondToOffer(credentialRecord)) {
            return await this.createRequest(credentialRecord, messageContext);
        }
    }
    async createRequest(record, messageContext) {
        var _a;
        this.agentConfig.logger.info(`Automatically sending request with autoAccept on ${this.agentConfig.autoAcceptCredentials}`);
        if (messageContext.connection) {
            const { message } = await this.credentialService.createRequest(record, {
                holderDid: messageContext.connection.did,
            });
            return helpers_1.createOutboundMessage(messageContext.connection, message);
        }
        else if ((_a = record.offerMessage) === null || _a === void 0 ? void 0 : _a.service) {
            const routing = await this.mediationRecipientService.getRouting();
            const ourService = new ServiceDecorator_1.ServiceDecorator({
                serviceEndpoint: routing.endpoints[0],
                recipientKeys: [routing.verkey],
                routingKeys: routing.routingKeys,
            });
            const recipientService = record.offerMessage.service;
            const { message, credentialRecord } = await this.credentialService.createRequest(record, {
                holderDid: ourService.recipientKeys[0],
            });
            // Set and save ~service decorator to record (to remember our verkey)
            message.service = ourService;
            credentialRecord.requestMessage = message;
            await this.credentialService.update(credentialRecord);
            return helpers_1.createOutboundServiceMessage({
                payload: message,
                service: recipientService.toDidCommService(),
                senderKey: ourService.recipientKeys[0],
            });
        }
        this.agentConfig.logger.error(`Could not automatically create credential request`);
    }
}
exports.OfferCredentialHandler = OfferCredentialHandler;
//# sourceMappingURL=OfferCredentialHandler.js.map