"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposePresentationHandler = void 0;
const helpers_1 = require("../../../agent/helpers");
const messages_1 = require("../messages");
class ProposePresentationHandler {
    constructor(proofService, agentConfig, proofResponseCoordinator) {
        this.supportedMessages = [messages_1.ProposePresentationMessage];
        this.proofService = proofService;
        this.agentConfig = agentConfig;
        this.proofResponseCoordinator = proofResponseCoordinator;
    }
    async handle(messageContext) {
        const proofRecord = await this.proofService.processProposal(messageContext);
        if (this.proofResponseCoordinator.shouldAutoRespondToProposal(proofRecord)) {
            return await this.createRequest(proofRecord, messageContext);
        }
    }
    async createRequest(proofRecord, messageContext) {
        this.agentConfig.logger.info(`Automatically sending request with autoAccept on ${this.agentConfig.autoAcceptProofs}`);
        if (!messageContext.connection) {
            this.agentConfig.logger.error('No connection on the messageContext');
            return;
        }
        if (!proofRecord.proposalMessage) {
            this.agentConfig.logger.error(`Proof record with id ${proofRecord.id} is missing required credential proposal`);
            return;
        }
        const proofRequest = await this.proofService.createProofRequestFromProposal(proofRecord.proposalMessage.presentationProposal, {
            name: 'proof-request',
            version: '1.0',
        });
        const { message } = await this.proofService.createRequestAsResponse(proofRecord, proofRequest);
        return helpers_1.createOutboundMessage(messageContext.connection, message);
    }
}
exports.ProposePresentationHandler = ProposePresentationHandler;
//# sourceMappingURL=ProposePresentationHandler.js.map