import type { EncryptedMessage } from '../../types';
import type { MediationRecord } from './repository';
import { AgentConfig } from '../../agent/AgentConfig';
import { Dispatcher } from '../../agent/Dispatcher';
import { EventEmitter } from '../../agent/EventEmitter';
import { MessageSender } from '../../agent/MessageSender';
import { ConnectionService } from '../connections/services';
import { MediatorService } from './services/MediatorService';
import { MessagePickupService } from './services/MessagePickupService';
export declare class MediatorModule {
    private mediatorService;
    private messagePickupService;
    private messageSender;
    eventEmitter: EventEmitter;
    agentConfig: AgentConfig;
    connectionService: ConnectionService;
    constructor(dispatcher: Dispatcher, mediationService: MediatorService, messagePickupService: MessagePickupService, messageSender: MessageSender, eventEmitter: EventEmitter, agentConfig: AgentConfig, connectionService: ConnectionService);
    grantRequestedMediation(mediatorId: string): Promise<MediationRecord>;
    queueMessage(connectionId: string, message: EncryptedMessage): void;
    private registerHandlers;
}
