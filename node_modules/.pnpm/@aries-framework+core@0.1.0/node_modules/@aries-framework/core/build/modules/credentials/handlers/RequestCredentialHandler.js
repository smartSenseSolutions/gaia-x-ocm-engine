"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestCredentialHandler = void 0;
const helpers_1 = require("../../../agent/helpers");
const messages_1 = require("../messages");
class RequestCredentialHandler {
    constructor(credentialService, agentConfig, credentialResponseCoordinator) {
        this.supportedMessages = [messages_1.RequestCredentialMessage];
        this.credentialService = credentialService;
        this.agentConfig = agentConfig;
        this.credentialResponseCoordinator = credentialResponseCoordinator;
    }
    async handle(messageContext) {
        const credentialRecord = await this.credentialService.processRequest(messageContext);
        if (this.credentialResponseCoordinator.shouldAutoRespondToRequest(credentialRecord)) {
            return await this.createCredential(credentialRecord, messageContext);
        }
    }
    async createCredential(record, messageContext) {
        var _a, _b;
        this.agentConfig.logger.info(`Automatically sending credential with autoAccept on ${this.agentConfig.autoAcceptCredentials}`);
        const { message, credentialRecord } = await this.credentialService.createCredential(record);
        if (messageContext.connection) {
            return helpers_1.createOutboundMessage(messageContext.connection, message);
        }
        else if (((_a = credentialRecord.requestMessage) === null || _a === void 0 ? void 0 : _a.service) && ((_b = credentialRecord.offerMessage) === null || _b === void 0 ? void 0 : _b.service)) {
            const recipientService = credentialRecord.requestMessage.service;
            const ourService = credentialRecord.offerMessage.service;
            // Set ~service, update message in record (for later use)
            message.setService(ourService);
            credentialRecord.credentialMessage = message;
            await this.credentialService.update(credentialRecord);
            return helpers_1.createOutboundServiceMessage({
                payload: message,
                service: recipientService.toDidCommService(),
                senderKey: ourService.recipientKeys[0],
            });
        }
        this.agentConfig.logger.error(`Could not automatically create credential request`);
    }
}
exports.RequestCredentialHandler = RequestCredentialHandler;
//# sourceMappingURL=RequestCredentialHandler.js.map