import type { InboundMessageContext } from '../../../agent/models/InboundMessageContext';
import type { EncryptedMessage } from '../../../types';
import type { ForwardMessage, KeylistUpdateMessage, MediationRequestMessage } from '../messages';
import { AgentConfig } from '../../../agent/AgentConfig';
import { EventEmitter } from '../../../agent/EventEmitter';
import { Wallet } from '../../../wallet/Wallet';
import { KeylistUpdateResult, MediationGrantMessage, KeylistUpdateResponseMessage } from '../messages';
import { MediationRecord } from '../repository/MediationRecord';
import { MediationRepository } from '../repository/MediationRepository';
import { MediatorRoutingRepository } from '../repository/MediatorRoutingRepository';
export declare class MediatorService {
    private agentConfig;
    private mediationRepository;
    private mediatorRoutingRepository;
    private wallet;
    private eventEmitter;
    private _mediatorRoutingRecord?;
    constructor(mediationRepository: MediationRepository, mediatorRoutingRepository: MediatorRoutingRepository, agentConfig: AgentConfig, wallet: Wallet, eventEmitter: EventEmitter);
    private getRoutingKeys;
    processForwardMessage(messageContext: InboundMessageContext<ForwardMessage>): Promise<{
        mediationRecord: MediationRecord;
        encryptedMessage: EncryptedMessage;
    }>;
    processKeylistUpdateRequest(messageContext: InboundMessageContext<KeylistUpdateMessage>): Promise<KeylistUpdateResponseMessage>;
    saveRoute(recipientKey: string, mediationRecord: MediationRecord): Promise<KeylistUpdateResult.ServerError | KeylistUpdateResult.Success>;
    removeRoute(recipientKey: string, mediationRecord: MediationRecord): Promise<KeylistUpdateResult.ServerError | KeylistUpdateResult.Success>;
    createGrantMediationMessage(mediationRecord: MediationRecord): Promise<{
        mediationRecord: MediationRecord;
        message: MediationGrantMessage;
    }>;
    processMediationRequest(messageContext: InboundMessageContext<MediationRequestMessage>): Promise<MediationRecord>;
    findById(mediatorRecordId: string): Promise<MediationRecord | null>;
    getById(mediatorRecordId: string): Promise<MediationRecord>;
    getAll(): Promise<MediationRecord[]>;
    private updateState;
}
