import type { AutoAcceptCredential } from './CredentialAutoAcceptType';
import type { OfferCredentialMessage, CredentialPreview } from './messages';
import type { CredentialRecord } from './repository/CredentialRecord';
import type { CredentialOfferTemplate, CredentialProposeOptions } from './services';
import { AgentConfig } from '../../agent/AgentConfig';
import { Dispatcher } from '../../agent/Dispatcher';
import { MessageSender } from '../../agent/MessageSender';
import { ConnectionService } from '../connections/services/ConnectionService';
import { MediationRecipientService } from '../routing';
import { CredentialResponseCoordinator } from './CredentialResponseCoordinator';
import { CredentialService } from './services';
export declare class CredentialsModule {
    private connectionService;
    private credentialService;
    private messageSender;
    private agentConfig;
    private credentialResponseCoordinator;
    private mediationRecipientService;
    constructor(dispatcher: Dispatcher, connectionService: ConnectionService, credentialService: CredentialService, messageSender: MessageSender, agentConfig: AgentConfig, credentialResponseCoordinator: CredentialResponseCoordinator, mediationRecipientService: MediationRecipientService);
    /**
     * Initiate a new credential exchange as holder by sending a credential proposal message
     * to the connection with the specified connection id.
     *
     * @param connectionId The connection to send the credential proposal to
     * @param config Additional configuration to use for the proposal
     * @returns Credential record associated with the sent proposal message
     */
    proposeCredential(connectionId: string, config?: CredentialProposeOptions): Promise<CredentialRecord>;
    /**
     * Accept a credential proposal as issuer (by sending a credential offer message) to the connection
     * associated with the credential record.
     *
     * @param credentialRecordId The id of the credential record for which to accept the proposal
     * @param config Additional configuration to use for the offer
     * @returns Credential record associated with the credential offer
     *
     */
    acceptProposal(credentialRecordId: string, config?: {
        comment?: string;
        credentialDefinitionId?: string;
        autoAcceptCredential?: AutoAcceptCredential;
    }): Promise<CredentialRecord>;
    /**
     * Negotiate a credential proposal as issuer (by sending a credential offer message) to the connection
     * associated with the credential record.
     *
     * @param credentialRecordId The id of the credential record for which to accept the proposal
     * @param preview The new preview for negotiation
     * @param config Additional configuration to use for the offer
     * @returns Credential record associated with the credential offer
     *
     */
    negotiateProposal(credentialRecordId: string, preview: CredentialPreview, config?: {
        comment?: string;
        credentialDefinitionId?: string;
        autoAcceptCredential?: AutoAcceptCredential;
    }): Promise<CredentialRecord>;
    /**
     * Initiate a new credential exchange as issuer by sending a credential offer message
     * to the connection with the specified connection id.
     *
     * @param connectionId The connection to send the credential offer to
     * @param credentialTemplate The credential template to use for the offer
     * @returns Credential record associated with the sent credential offer message
     */
    offerCredential(connectionId: string, credentialTemplate: CredentialOfferTemplate): Promise<CredentialRecord>;
    /**
     * Initiate a new credential exchange as issuer by creating a credential offer
     * not bound to any connection. The offer must be delivered out-of-band to the holder
     *
     * @param credentialTemplate The credential template to use for the offer
     * @returns The credential record and credential offer message
     */
    createOutOfBandOffer(credentialTemplate: CredentialOfferTemplate): Promise<{
        offerMessage: OfferCredentialMessage;
        credentialRecord: CredentialRecord;
    }>;
    /**
     * Accept a credential offer as holder (by sending a credential request message) to the connection
     * associated with the credential record.
     *
     * @param credentialRecordId The id of the credential record for which to accept the offer
     * @param config Additional configuration to use for the request
     * @returns Credential record associated with the sent credential request message
     *
     */
    acceptOffer(credentialRecordId: string, config?: {
        comment?: string;
        autoAcceptCredential?: AutoAcceptCredential;
    }): Promise<CredentialRecord>;
    /**
     * Declines an offer as holder
     * @param credentialRecordId the id of the credential to be declined
     * @returns credential record that was declined
     */
    declineOffer(credentialRecordId: string): Promise<CredentialRecord>;
    /**
     * Negotiate a credential offer as holder (by sending a credential proposal message) to the connection
     * associated with the credential record.
     *
     * @param credentialRecordId The id of the credential record for which to accept the offer
     * @param preview The new preview for negotiation
     * @param config Additional configuration to use for the request
     * @returns Credential record associated with the sent credential request message
     *
     */
    negotiateOffer(credentialRecordId: string, preview: CredentialPreview, config?: {
        comment?: string;
        autoAcceptCredential?: AutoAcceptCredential;
    }): Promise<CredentialRecord>;
    /**
     * Accept a credential request as issuer (by sending a credential message) to the connection
     * associated with the credential record.
     *
     * @param credentialRecordId The id of the credential record for which to accept the request
     * @param config Additional configuration to use for the credential
     * @returns Credential record associated with the sent presentation message
     *
     */
    acceptRequest(credentialRecordId: string, config?: {
        comment?: string;
        autoAcceptCredential?: AutoAcceptCredential;
    }): Promise<CredentialRecord>;
    /**
     * Accept a credential as holder (by sending a credential acknowledgement message) to the connection
     * associated with the credential record.
     *
     * @param credentialRecordId The id of the credential record for which to accept the credential
     * @returns credential record associated with the sent credential acknowledgement message
     *
     */
    acceptCredential(credentialRecordId: string): Promise<CredentialRecord>;
    /**
     * Send problem report message for a credential record
     * @param credentialRecordId  The id of the credential record for which to send problem report
     * @param message message to send
     * @returns credential record associated with credential problem report message
     */
    sendProblemReport(credentialRecordId: string, message: string): Promise<CredentialRecord>;
    /**
     * Retrieve all credential records
     *
     * @returns List containing all credential records
     */
    getAll(): Promise<CredentialRecord[]>;
    /**
     * Retrieve a credential record by id
     *
     * @param credentialRecordId The credential record id
     * @throws {RecordNotFoundError} If no record is found
     * @return The credential record
     *
     */
    getById(credentialRecordId: string): Promise<CredentialRecord>;
    /**
     * Find a credential record by id
     *
     * @param credentialRecordId the credential record id
     * @returns The credential record or null if not found
     */
    findById(connectionId: string): Promise<CredentialRecord | null>;
    /**
     * Delete a credential record by id
     *
     * @param credentialId the credential record id
     */
    deleteById(credentialId: string): Promise<void>;
    private registerHandlers;
}
