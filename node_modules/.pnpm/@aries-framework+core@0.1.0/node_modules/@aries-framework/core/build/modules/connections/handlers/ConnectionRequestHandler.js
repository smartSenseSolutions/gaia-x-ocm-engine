"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionRequestHandler = void 0;
const helpers_1 = require("../../../agent/helpers");
const AriesFrameworkError_1 = require("../../../error/AriesFrameworkError");
const messages_1 = require("../messages");
class ConnectionRequestHandler {
    constructor(connectionService, agentConfig, mediationRecipientService) {
        this.supportedMessages = [messages_1.ConnectionRequestMessage];
        this.connectionService = connectionService;
        this.agentConfig = agentConfig;
        this.mediationRecipientService = mediationRecipientService;
    }
    async handle(messageContext) {
        var _a;
        if (!messageContext.recipientVerkey || !messageContext.senderVerkey) {
            throw new AriesFrameworkError_1.AriesFrameworkError('Unable to process connection request without senderVerkey or recipientVerkey');
        }
        let connectionRecord = await this.connectionService.findByVerkey(messageContext.recipientVerkey);
        if (!connectionRecord) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`Connection for verkey ${messageContext.recipientVerkey} not found!`);
        }
        let routing;
        // routing object is required for multi use invitation, because we're creating a
        // new keypair that possibly needs to be registered at a mediator
        if (connectionRecord.multiUseInvitation) {
            routing = await this.mediationRecipientService.getRouting();
        }
        connectionRecord = await this.connectionService.processRequest(messageContext, routing);
        if ((_a = connectionRecord === null || connectionRecord === void 0 ? void 0 : connectionRecord.autoAcceptConnection) !== null && _a !== void 0 ? _a : this.agentConfig.autoAcceptConnections) {
            const { message } = await this.connectionService.createResponse(connectionRecord.id);
            return helpers_1.createOutboundMessage(connectionRecord, message);
        }
    }
}
exports.ConnectionRequestHandler = ConnectionRequestHandler;
//# sourceMappingURL=ConnectionRequestHandler.js.map