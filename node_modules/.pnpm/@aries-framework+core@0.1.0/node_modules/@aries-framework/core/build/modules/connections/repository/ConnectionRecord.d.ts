import type { TagsBase } from '../../../storage/BaseRecord';
import type { ConnectionRole } from '../models/ConnectionRole';
import { BaseRecord } from '../../../storage/BaseRecord';
import { ConnectionInvitationMessage } from '../messages/ConnectionInvitationMessage';
import { ConnectionState } from '../models/ConnectionState';
import { DidDoc } from '../models/did/DidDoc';
export interface ConnectionRecordProps {
    id?: string;
    createdAt?: Date;
    did: string;
    didDoc: DidDoc;
    verkey: string;
    theirDid?: string;
    theirDidDoc?: DidDoc;
    theirLabel?: string;
    invitation?: ConnectionInvitationMessage;
    state: ConnectionState;
    role: ConnectionRole;
    alias?: string;
    autoAcceptConnection?: boolean;
    threadId?: string;
    tags?: CustomConnectionTags;
    imageUrl?: string;
    multiUseInvitation: boolean;
    mediatorId?: string;
    errorMessage?: string;
}
export declare type CustomConnectionTags = TagsBase;
export declare type DefaultConnectionTags = {
    state: ConnectionState;
    role: ConnectionRole;
    invitationKey?: string;
    threadId?: string;
    verkey?: string;
    theirKey?: string;
    mediatorId?: string;
};
export declare class ConnectionRecord extends BaseRecord<DefaultConnectionTags, CustomConnectionTags> implements ConnectionRecordProps {
    state: ConnectionState;
    role: ConnectionRole;
    didDoc: DidDoc;
    did: string;
    verkey: string;
    theirDidDoc?: DidDoc;
    theirDid?: string;
    theirLabel?: string;
    invitation?: ConnectionInvitationMessage;
    alias?: string;
    autoAcceptConnection?: boolean;
    imageUrl?: string;
    multiUseInvitation: boolean;
    threadId?: string;
    mediatorId?: string;
    errorMessage?: string;
    static readonly type = "ConnectionRecord";
    readonly type = "ConnectionRecord";
    constructor(props: ConnectionRecordProps);
    getTags(): {
        state: ConnectionState;
        role: ConnectionRole;
        invitationKey: string | undefined;
        threadId: string | undefined;
        verkey: string;
        theirKey: string | undefined;
        mediatorId: string | undefined;
    };
    get myKey(): string | null;
    get theirKey(): string | null;
    get isReady(): boolean;
    assertReady(): void;
    assertState(expectedStates: ConnectionState | ConnectionState[]): void;
    assertRole(expectedRole: ConnectionRole): void;
}
