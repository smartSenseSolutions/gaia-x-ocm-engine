import type { AgentMessage } from '../../../agent/AgentMessage';
import type { InboundMessageContext } from '../../../agent/models/InboundMessageContext';
import type { LinkedAttachment } from '../../../utils/LinkedAttachment';
import type { ConnectionRecord } from '../../connections';
import type { AutoAcceptCredential } from '../CredentialAutoAcceptType';
import type { CredentialProblemReportMessage, ProposeCredentialMessageOptions } from '../messages';
import { AgentConfig } from '../../../agent/AgentConfig';
import { EventEmitter } from '../../../agent/EventEmitter';
import { Attachment } from '../../../decorators/attachment/Attachment';
import { ConnectionService } from '../../connections/services/ConnectionService';
import { IndyHolderService, IndyIssuerService } from '../../indy';
import { IndyLedgerService } from '../../ledger/services/IndyLedgerService';
import { CredentialAckMessage, CredentialPreview, IssueCredentialMessage, OfferCredentialMessage, ProposeCredentialMessage, RequestCredentialMessage } from '../messages';
import { CredentialRepository } from '../repository';
import { CredentialRecord } from '../repository/CredentialRecord';
export declare class CredentialService {
    private credentialRepository;
    private connectionService;
    private ledgerService;
    private logger;
    private indyIssuerService;
    private indyHolderService;
    private eventEmitter;
    constructor(credentialRepository: CredentialRepository, connectionService: ConnectionService, ledgerService: IndyLedgerService, agentConfig: AgentConfig, indyIssuerService: IndyIssuerService, indyHolderService: IndyHolderService, eventEmitter: EventEmitter);
    /**
     * Create a {@link ProposeCredentialMessage} not bound to an existing credential exchange.
     * To create a proposal as response to an existing credential exchange, use {@link CredentialService#createProposalAsResponse}.
     *
     * @param connectionRecord The connection for which to create the credential proposal
     * @param config Additional configuration to use for the proposal
     * @returns Object containing proposal message and associated credential record
     *
     */
    createProposal(connectionRecord: ConnectionRecord, config?: CredentialProposeOptions): Promise<CredentialProtocolMsgReturnType<ProposeCredentialMessage>>;
    /**
     * Create a {@link ProposePresentationMessage} as response to a received credential offer.
     * To create a proposal not bound to an existing credential exchange, use {@link CredentialService#createProposal}.
     *
     * @param credentialRecord The credential record for which to create the credential proposal
     * @param config Additional configuration to use for the proposal
     * @returns Object containing proposal message and associated credential record
     *
     */
    createProposalAsResponse(credentialRecord: CredentialRecord, config?: CredentialProposeOptions): Promise<CredentialProtocolMsgReturnType<ProposeCredentialMessage>>;
    /**
     * Process a received {@link ProposeCredentialMessage}. This will not accept the credential proposal
     * or send a credential offer. It will only create a new, or update the existing credential record with
     * the information from the credential proposal message. Use {@link CredentialService#createOfferAsResponse}
     * after calling this method to create a credential offer.
     *
     * @param messageContext The message context containing a credential proposal message
     * @returns credential record associated with the credential proposal message
     *
     */
    processProposal(messageContext: InboundMessageContext<ProposeCredentialMessage>): Promise<CredentialRecord>;
    /**
     * Create a {@link OfferCredentialMessage} as response to a received credential proposal.
     * To create an offer not bound to an existing credential exchange, use {@link CredentialService#createOffer}.
     *
     * @param credentialRecord The credential record for which to create the credential offer
     * @param credentialTemplate The credential template to use for the offer
     * @returns Object containing offer message and associated credential record
     *
     */
    createOfferAsResponse(credentialRecord: CredentialRecord, credentialTemplate: CredentialOfferTemplate): Promise<CredentialProtocolMsgReturnType<OfferCredentialMessage>>;
    /**
     * Create a {@link OfferCredentialMessage} not bound to an existing credential exchange.
     * To create an offer as response to an existing credential exchange, use {@link CredentialService#createOfferAsResponse}.
     *
     * @param connectionRecord The connection for which to create the credential offer
     * @param credentialTemplate The credential template to use for the offer
     * @returns Object containing offer message and associated credential record
     *
     */
    createOffer(credentialTemplate: CredentialOfferTemplate, connectionRecord?: ConnectionRecord): Promise<CredentialProtocolMsgReturnType<OfferCredentialMessage>>;
    /**
     * Process a received {@link OfferCredentialMessage}. This will not accept the credential offer
     * or send a credential request. It will only create a new credential record with
     * the information from the credential offer message. Use {@link CredentialService#createRequest}
     * after calling this method to create a credential request.
     *
     * @param messageContext The message context containing a credential request message
     * @returns credential record associated with the credential offer message
     *
     */
    processOffer(messageContext: InboundMessageContext<OfferCredentialMessage>): Promise<CredentialRecord>;
    /**
     * Create a {@link RequestCredentialMessage} as response to a received credential offer.
     *
     * @param credentialRecord The credential record for which to create the credential request
     * @param options Additional configuration to use for the credential request
     * @returns Object containing request message and associated credential record
     *
     */
    createRequest(credentialRecord: CredentialRecord, options: CredentialRequestOptions): Promise<CredentialProtocolMsgReturnType<RequestCredentialMessage>>;
    /**
     * Process a received {@link RequestCredentialMessage}. This will not accept the credential request
     * or send a credential. It will only update the existing credential record with
     * the information from the credential request message. Use {@link CredentialService#createCredential}
     * after calling this method to create a credential.
     *
     * @param messageContext The message context containing a credential request message
     * @returns credential record associated with the credential request message
     *
     */
    processRequest(messageContext: InboundMessageContext<RequestCredentialMessage>): Promise<CredentialRecord>;
    /**
     * Create a {@link IssueCredentialMessage} as response to a received credential request.
     *
     * @param credentialRecord The credential record for which to create the credential
     * @param options Additional configuration to use for the credential
     * @returns Object containing issue credential message and associated credential record
     *
     */
    createCredential(credentialRecord: CredentialRecord, options?: CredentialResponseOptions): Promise<CredentialProtocolMsgReturnType<IssueCredentialMessage>>;
    /**
     * Process a received {@link IssueCredentialMessage}. This will not accept the credential
     * or send a credential acknowledgement. It will only update the existing credential record with
     * the information from the issue credential message. Use {@link CredentialService#createAck}
     * after calling this method to create a credential acknowledgement.
     *
     * @param messageContext The message context containing an issue credential message
     *
     * @returns credential record associated with the issue credential message
     *
     */
    processCredential(messageContext: InboundMessageContext<IssueCredentialMessage>): Promise<CredentialRecord>;
    /**
     * Create a {@link CredentialAckMessage} as response to a received credential.
     *
     * @param credentialRecord The credential record for which to create the credential acknowledgement
     * @returns Object containing credential acknowledgement message and associated credential record
     *
     */
    createAck(credentialRecord: CredentialRecord): Promise<CredentialProtocolMsgReturnType<CredentialAckMessage>>;
    /**
     * Decline a credential offer
     * @param credentialRecord The credential to be declined
     */
    declineOffer(credentialRecord: CredentialRecord): Promise<CredentialRecord>;
    /**
     * Process a received {@link CredentialAckMessage}.
     *
     * @param messageContext The message context containing a credential acknowledgement message
     * @returns credential record associated with the credential acknowledgement message
     *
     */
    processAck(messageContext: InboundMessageContext<CredentialAckMessage>): Promise<CredentialRecord>;
    /**
     * Process a received {@link ProblemReportMessage}.
     *
     * @param messageContext The message context containing a credential problem report message
     * @returns credential record associated with the credential problem report message
     *
     */
    processProblemReport(messageContext: InboundMessageContext<CredentialProblemReportMessage>): Promise<CredentialRecord>;
    /**
     * Retrieve all credential records
     *
     * @returns List containing all credential records
     */
    getAll(): Promise<CredentialRecord[]>;
    /**
     * Retrieve a credential record by id
     *
     * @param credentialRecordId The credential record id
     * @throws {RecordNotFoundError} If no record is found
     * @return The credential record
     *
     */
    getById(credentialRecordId: string): Promise<CredentialRecord>;
    /**
     * Find a credential record by id
     *
     * @param credentialRecordId the credential record id
     * @returns The credential record or null if not found
     */
    findById(connectionId: string): Promise<CredentialRecord | null>;
    /**
     * Delete a credential record by id
     *
     * @param credentialId the credential record id
     */
    deleteById(credentialId: string): Promise<void>;
    /**
     * Retrieve a credential record by connection id and thread id
     *
     * @param connectionId The connection id
     * @param threadId The thread id
     * @throws {RecordNotFoundError} If no record is found
     * @throws {RecordDuplicateError} If multiple records are found
     * @returns The credential record
     */
    getByThreadAndConnectionId(threadId: string, connectionId?: string): Promise<CredentialRecord>;
    update(credentialRecord: CredentialRecord): Promise<void>;
    /**
     * Update the record to a new state and emit an state changed event. Also updates the record
     * in storage.
     *
     * @param credentialRecord The credential record to update the state for
     * @param newState The state to update to
     *
     */
    private updateState;
}
export interface CredentialProtocolMsgReturnType<MessageType extends AgentMessage> {
    message: MessageType;
    credentialRecord: CredentialRecord;
}
export interface CredentialOfferTemplate {
    credentialDefinitionId: string;
    comment?: string;
    preview: CredentialPreview;
    autoAcceptCredential?: AutoAcceptCredential;
    attachments?: Attachment[];
    linkedAttachments?: LinkedAttachment[];
}
export interface CredentialRequestOptions {
    holderDid: string;
    comment?: string;
    autoAcceptCredential?: AutoAcceptCredential;
}
export interface CredentialResponseOptions {
    comment?: string;
    autoAcceptCredential?: AutoAcceptCredential;
}
export declare type CredentialProposeOptions = Omit<ProposeCredentialMessageOptions, 'id'> & {
    linkedAttachments?: LinkedAttachment[];
    autoAcceptCredential?: AutoAcceptCredential;
};
