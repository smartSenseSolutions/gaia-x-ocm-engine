"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProofRecord = void 0;
const class_transformer_1 = require("class-transformer");
const error_1 = require("../../../error");
const BaseRecord_1 = require("../../../storage/BaseRecord");
const uuid_1 = require("../../../utils/uuid");
const messages_1 = require("../messages");
class ProofRecord extends BaseRecord_1.BaseRecord {
    constructor(props) {
        var _a, _b, _c;
        super();
        this.type = ProofRecord.type;
        if (props) {
            this.id = (_a = props.id) !== null && _a !== void 0 ? _a : uuid_1.uuid();
            this.createdAt = (_b = props.createdAt) !== null && _b !== void 0 ? _b : new Date();
            this.proposalMessage = props.proposalMessage;
            this.requestMessage = props.requestMessage;
            this.presentationMessage = props.presentationMessage;
            this.isVerified = props.isVerified;
            this.state = props.state;
            this.connectionId = props.connectionId;
            this.threadId = props.threadId;
            this.presentationId = props.presentationId;
            this.autoAcceptProof = props.autoAcceptProof;
            this._tags = (_c = props.tags) !== null && _c !== void 0 ? _c : {};
            this.errorMessage = props.errorMessage;
        }
    }
    getTags() {
        return Object.assign(Object.assign({}, this._tags), { threadId: this.threadId, connectionId: this.connectionId, state: this.state });
    }
    assertState(expectedStates) {
        if (!Array.isArray(expectedStates)) {
            expectedStates = [expectedStates];
        }
        if (!expectedStates.includes(this.state)) {
            throw new error_1.AriesFrameworkError(`Proof record is in invalid state ${this.state}. Valid states are: ${expectedStates.join(', ')}.`);
        }
    }
    assertConnection(currentConnectionId) {
        if (!this.connectionId) {
            throw new error_1.AriesFrameworkError(`Proof record is not associated with any connection. This is often the case with connection-less presentation exchange`);
        }
        else if (this.connectionId !== currentConnectionId) {
            throw new error_1.AriesFrameworkError(`Proof record is associated with connection '${this.connectionId}'. Current connection is '${currentConnectionId}'`);
        }
    }
}
ProofRecord.type = 'ProofRecord';
__decorate([
    class_transformer_1.Type(() => messages_1.ProposePresentationMessage),
    __metadata("design:type", messages_1.ProposePresentationMessage)
], ProofRecord.prototype, "proposalMessage", void 0);
__decorate([
    class_transformer_1.Type(() => messages_1.RequestPresentationMessage),
    __metadata("design:type", messages_1.RequestPresentationMessage)
], ProofRecord.prototype, "requestMessage", void 0);
__decorate([
    class_transformer_1.Type(() => messages_1.PresentationMessage),
    __metadata("design:type", messages_1.PresentationMessage)
], ProofRecord.prototype, "presentationMessage", void 0);
exports.ProofRecord = ProofRecord;
//# sourceMappingURL=ProofRecord.js.map