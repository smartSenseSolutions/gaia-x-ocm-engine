"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dispatcher = void 0;
const tsyringe_1 = require("tsyringe");
const AgentConfig_1 = require("../agent/AgentConfig");
const AriesFrameworkError_1 = require("../error/AriesFrameworkError");
const ProblemReportMessage_1 = require("./../modules/problem-reports/messages/ProblemReportMessage");
const EventEmitter_1 = require("./EventEmitter");
const Events_1 = require("./Events");
const MessageSender_1 = require("./MessageSender");
const helpers_1 = require("./helpers");
let Dispatcher = class Dispatcher {
    constructor(messageSender, eventEmitter, agentConfig) {
        this.handlers = [];
        this.messageSender = messageSender;
        this.eventEmitter = eventEmitter;
        this.logger = agentConfig.logger;
    }
    registerHandler(handler) {
        this.handlers.push(handler);
    }
    async dispatch(messageContext) {
        var _a;
        const message = messageContext.message;
        const handler = this.getHandlerForType(message.type);
        if (!handler) {
            throw new AriesFrameworkError_1.AriesFrameworkError(`No handler for message type "${message.type}" found`);
        }
        let outboundMessage;
        try {
            outboundMessage = await handler.handle(messageContext);
        }
        catch (error) {
            const problemReportMessage = error.problemReport;
            if (problemReportMessage instanceof ProblemReportMessage_1.ProblemReportMessage && messageContext.connection) {
                problemReportMessage.setThread({
                    threadId: messageContext.message.threadId,
                });
                outboundMessage = {
                    payload: problemReportMessage,
                    connection: messageContext.connection,
                };
            }
            else {
                this.logger.error(`Error handling message with type ${message.type}`, {
                    message: message.toJSON(),
                    error,
                    senderVerkey: messageContext.senderVerkey,
                    recipientVerkey: messageContext.recipientVerkey,
                    connectionId: (_a = messageContext.connection) === null || _a === void 0 ? void 0 : _a.id,
                });
                throw error;
            }
        }
        if (outboundMessage && helpers_1.isOutboundServiceMessage(outboundMessage)) {
            await this.messageSender.sendMessageToService({
                message: outboundMessage.payload,
                service: outboundMessage.service,
                senderKey: outboundMessage.senderKey,
                returnRoute: true,
            });
        }
        else if (outboundMessage) {
            await this.messageSender.sendMessage(outboundMessage);
        }
        // Emit event that allows to hook into received messages
        this.eventEmitter.emit({
            type: Events_1.AgentEventTypes.AgentMessageProcessed,
            payload: {
                message: messageContext.message,
                connection: messageContext.connection,
            },
        });
    }
    getHandlerForType(messageType) {
        for (const handler of this.handlers) {
            for (const MessageClass of handler.supportedMessages) {
                if (MessageClass.type === messageType)
                    return handler;
            }
        }
    }
    getMessageClassForType(messageType) {
        for (const handler of this.handlers) {
            for (const MessageClass of handler.supportedMessages) {
                if (MessageClass.type === messageType)
                    return MessageClass;
            }
        }
    }
    /**
     * Returns array of message types that dispatcher is able to handle.
     * Message type format is MTURI specified at https://github.com/hyperledger/aries-rfcs/blob/main/concepts/0003-protocols/README.md#mturi.
     */
    get supportedMessageTypes() {
        return this.handlers
            .reduce((all, cur) => [...all, ...cur.supportedMessages], [])
            .map((m) => m.type);
    }
    /**
     * Returns array of protocol IDs that dispatcher is able to handle.
     * Protocol ID format is PIURI specified at https://github.com/hyperledger/aries-rfcs/blob/main/concepts/0003-protocols/README.md#piuri.
     */
    get supportedProtocols() {
        return Array.from(new Set(this.supportedMessageTypes.map((m) => m.substring(0, m.lastIndexOf('/')))));
    }
    filterSupportedProtocolsByMessageFamilies(messageFamilies) {
        return this.supportedProtocols.filter((protocolId) => messageFamilies.find((messageFamily) => protocolId.startsWith(messageFamily)));
    }
};
Dispatcher = __decorate([
    tsyringe_1.scoped(tsyringe_1.Lifecycle.ContainerScoped),
    __metadata("design:paramtypes", [MessageSender_1.MessageSender, EventEmitter_1.EventEmitter, AgentConfig_1.AgentConfig])
], Dispatcher);
exports.Dispatcher = Dispatcher;
//# sourceMappingURL=Dispatcher.js.map