import type { DidDoc, IndyAgentService } from '../modules/connections/models';
import type { ConnectionRecord } from '../modules/connections/repository';
import type { EncryptedMessage } from '../types';
import type { AgentMessage } from './AgentMessage';
import type { EnvelopeKeys } from './EnvelopeService';
import { DidCommService } from '../modules/connections/models';
export declare class TransportService {
    private transportSessionTable;
    saveSession(session: TransportSession): void;
    findSessionByConnectionId(connectionId: string): TransportSession | undefined;
    hasInboundEndpoint(didDoc: DidDoc): boolean;
    findSessionById(sessionId: string): TransportSession;
    removeSession(session: TransportSession): void;
    findDidCommServices(connection: ConnectionRecord): Array<DidCommService | IndyAgentService>;
}
export interface TransportSession {
    id: string;
    type: string;
    keys?: EnvelopeKeys;
    inboundMessage?: AgentMessage;
    connection?: ConnectionRecord;
    send(encryptedMessage: EncryptedMessage): Promise<void>;
}
