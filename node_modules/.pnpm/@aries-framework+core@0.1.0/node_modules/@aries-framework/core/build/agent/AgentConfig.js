"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentConfig = void 0;
const rxjs_1 = require("rxjs");
const constants_1 = require("../constants");
const error_1 = require("../error");
const logger_1 = require("../logger");
const CredentialAutoAcceptType_1 = require("../modules/credentials/CredentialAutoAcceptType");
const ProofAutoAcceptType_1 = require("../modules/proofs/ProofAutoAcceptType");
const MediatorPickupStrategy_1 = require("../modules/routing/MediatorPickupStrategy");
const types_1 = require("../types");
class AgentConfig {
    constructor(initConfig, agentDependencies) {
        var _a;
        // $stop is used for agent shutdown signal
        this.stop$ = new rxjs_1.Subject();
        this.initConfig = initConfig;
        this.label = initConfig.label;
        this.logger = (_a = initConfig.logger) !== null && _a !== void 0 ? _a : new logger_1.ConsoleLogger(logger_1.LogLevel.off);
        this.agentDependencies = agentDependencies;
        this.fileSystem = new agentDependencies.FileSystem();
        const { mediatorConnectionsInvite, clearDefaultMediator, defaultMediatorId } = this.initConfig;
        const allowOne = [mediatorConnectionsInvite, clearDefaultMediator, defaultMediatorId].filter((e) => e !== undefined);
        if (allowOne.length > 1) {
            throw new error_1.AriesFrameworkError(`Only one of 'mediatorConnectionsInvite', 'clearDefaultMediator' and 'defaultMediatorId' can be set as they negate each other`);
        }
    }
    get publicDidSeed() {
        return this.initConfig.publicDidSeed;
    }
    get indyLedgers() {
        var _a;
        return (_a = this.initConfig.indyLedgers) !== null && _a !== void 0 ? _a : [];
    }
    get walletConfig() {
        return this.initConfig.walletConfig;
    }
    get autoAcceptConnections() {
        var _a;
        return (_a = this.initConfig.autoAcceptConnections) !== null && _a !== void 0 ? _a : false;
    }
    get autoAcceptProofs() {
        var _a;
        return (_a = this.initConfig.autoAcceptProofs) !== null && _a !== void 0 ? _a : ProofAutoAcceptType_1.AutoAcceptProof.Never;
    }
    get autoAcceptCredentials() {
        var _a;
        return (_a = this.initConfig.autoAcceptCredentials) !== null && _a !== void 0 ? _a : CredentialAutoAcceptType_1.AutoAcceptCredential.Never;
    }
    get didCommMimeType() {
        var _a;
        return (_a = this.initConfig.didCommMimeType) !== null && _a !== void 0 ? _a : types_1.DidCommMimeType.V0;
    }
    get mediatorPollingInterval() {
        var _a;
        return (_a = this.initConfig.mediatorPollingInterval) !== null && _a !== void 0 ? _a : 5000;
    }
    get mediatorPickupStrategy() {
        var _a;
        return (_a = this.initConfig.mediatorPickupStrategy) !== null && _a !== void 0 ? _a : MediatorPickupStrategy_1.MediatorPickupStrategy.Explicit;
    }
    get endpoints() {
        // if endpoints is not set, return queue endpoint
        // https://github.com/hyperledger/aries-rfcs/issues/405#issuecomment-582612875
        if (!this.initConfig.endpoints || this.initConfig.endpoints.length === 0) {
            return [constants_1.DID_COMM_TRANSPORT_QUEUE];
        }
        return this.initConfig.endpoints;
    }
    get mediatorConnectionsInvite() {
        return this.initConfig.mediatorConnectionsInvite;
    }
    get autoAcceptMediationRequests() {
        var _a;
        return (_a = this.initConfig.autoAcceptMediationRequests) !== null && _a !== void 0 ? _a : false;
    }
    get defaultMediatorId() {
        return this.initConfig.defaultMediatorId;
    }
    get clearDefaultMediator() {
        var _a;
        return (_a = this.initConfig.clearDefaultMediator) !== null && _a !== void 0 ? _a : false;
    }
    get useLegacyDidSovPrefix() {
        var _a;
        return (_a = this.initConfig.useLegacyDidSovPrefix) !== null && _a !== void 0 ? _a : false;
    }
    get connectionImageUrl() {
        return this.initConfig.connectionImageUrl;
    }
}
exports.AgentConfig = AgentConfig;
//# sourceMappingURL=AgentConfig.js.map