"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransportService = void 0;
const tsyringe_1 = require("tsyringe");
const constants_1 = require("../constants");
const models_1 = require("../modules/connections/models");
let TransportService = class TransportService {
    constructor() {
        this.transportSessionTable = {};
    }
    saveSession(session) {
        this.transportSessionTable[session.id] = session;
    }
    findSessionByConnectionId(connectionId) {
        return Object.values(this.transportSessionTable).find((session) => { var _a; return ((_a = session.connection) === null || _a === void 0 ? void 0 : _a.id) === connectionId; });
    }
    hasInboundEndpoint(didDoc) {
        return Boolean(didDoc.didCommServices.find((s) => s.serviceEndpoint !== constants_1.DID_COMM_TRANSPORT_QUEUE));
    }
    findSessionById(sessionId) {
        return this.transportSessionTable[sessionId];
    }
    removeSession(session) {
        delete this.transportSessionTable[session.id];
    }
    findDidCommServices(connection) {
        if (connection.theirDidDoc) {
            return connection.theirDidDoc.didCommServices;
        }
        if (connection.role === models_1.ConnectionRole.Invitee && connection.invitation) {
            const { invitation } = connection;
            if (invitation.serviceEndpoint) {
                const service = new models_1.DidCommService({
                    id: `${connection.id}-invitation`,
                    serviceEndpoint: invitation.serviceEndpoint,
                    recipientKeys: invitation.recipientKeys || [],
                    routingKeys: invitation.routingKeys || [],
                });
                return [service];
            }
        }
        return [];
    }
};
TransportService = __decorate([
    tsyringe_1.scoped(tsyringe_1.Lifecycle.ContainerScoped)
], TransportService);
exports.TransportService = TransportService;
//# sourceMappingURL=TransportService.js.map