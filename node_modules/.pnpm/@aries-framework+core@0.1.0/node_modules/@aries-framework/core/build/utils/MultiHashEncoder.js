"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiHashEncoder = void 0;
const multihash = __importStar(require("multihashes"));
class MultiHashEncoder {
    /**
     *
     * Encodes a buffer into a hash
     *
     * @param buffer the buffer that has to be encoded
     * @param hashName the hashing algorithm, 'sha2-256'
     *
     * @returns a multihash
     */
    static encode(buffer, hashName) {
        return multihash.encode(buffer, hashName);
    }
    /**
     *
     * Decodes the multihash
     *
     * @param data the multihash that has to be decoded
     *
     * @returns object with the data and the hashing algorithm
     */
    static decode(data) {
        if (this.isValid(data)) {
            const decodedHash = multihash.decode(data);
            return { data: decodedHash.digest, hashName: decodedHash.name };
        }
        throw new Error(`Invalid multihash: ${data}`);
    }
    /**
     *
     * Validates if it is a valid mulithash
     *
     * @param data the multihash that needs to be validated
     *
     * @returns a boolean whether the multihash is valid
     */
    static isValid(data) {
        try {
            multihash.validate(data);
            return true;
        }
        catch (e) {
            return false;
        }
    }
}
exports.MultiHashEncoder = MultiHashEncoder;
//# sourceMappingURL=MultiHashEncoder.js.map