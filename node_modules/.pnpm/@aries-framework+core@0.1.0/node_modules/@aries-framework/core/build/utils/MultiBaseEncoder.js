"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiBaseEncoder = void 0;
const multibase_1 = __importDefault(require("multibase"));
class MultiBaseEncoder {
    /**
     *
     * Encodes a buffer into a multibase
     *
     * @param {Uint8Array} buffer the buffer that has to be encoded
     * @param {multibase.BaseName} baseName the encoding algorithm
     */
    static encode(buffer, baseName = 'base58btc') {
        return multibase_1.default.encode(baseName, buffer);
    }
    /**
     *
     * Decodes a multibase into a Uint8Array
     *
     * @param {string} data the multibase that has to be decoded
     *
     * @returns {Uint8array} data the decoded multibase
     * @returns {string} encodingAlgorithm name of the encoding algorithm
     */
    static decode(data) {
        if (this.isValid(data)) {
            const baseName = multibase_1.default.encodingFromData(data).name;
            return { data: multibase_1.default.decode(data), baseName };
        }
        throw new Error(`Invalid multibase: ${data}`);
    }
    /**
     *
     * Validates if it is a valid multibase encoded value
     *
     * @param {Uint8Array} data the multibase that needs to be validated
     *
     * @returns {boolean} bool whether the multibase value is encoded
     */
    static isValid(data) {
        return multibase_1.default.isEncoded(data) ? true : false;
    }
}
exports.MultiBaseEncoder = MultiBaseEncoder;
//# sourceMappingURL=MultiBaseEncoder.js.map